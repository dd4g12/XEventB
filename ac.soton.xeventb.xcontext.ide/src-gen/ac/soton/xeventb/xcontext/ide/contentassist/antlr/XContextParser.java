/*
 * generated by Xtext 2.13.0
 */
package ac.soton.xeventb.xcontext.ide.contentassist.antlr;

import ac.soton.xeventb.xcontext.ide.contentassist.antlr.internal.InternalXContextParser;
import ac.soton.xeventb.xcontext.services.XContextGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class XContextParser extends AbstractContentAssistParser {

	@Inject
	private XContextGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalXContextParser createParser() {
		InternalXContextParser result = new InternalXContextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getXContextAccess().getCommentAlternatives_1_0(), "rule__XContext__CommentAlternatives_1_0");
					put(grammarAccess.getXPredicateAccess().getAlternatives(), "rule__XPredicate__Alternatives");
					put(grammarAccess.getEVENTB_IDENTIFIER_KEYWORDAccess().getAlternatives(), "rule__EVENTB_IDENTIFIER_KEYWORD__Alternatives");
					put(grammarAccess.getEVENTB_PREDICATE_SYMBOLSAccess().getAlternatives(), "rule__EVENTB_PREDICATE_SYMBOLS__Alternatives");
					put(grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getAlternatives(), "rule__EVENTB_EXPRESSION_SYMBOLS__Alternatives");
					put(grammarAccess.getXContextAccess().getGroup(), "rule__XContext__Group__0");
					put(grammarAccess.getXContextAccess().getGroup_4(), "rule__XContext__Group_4__0");
					put(grammarAccess.getXContextAccess().getGroup_5(), "rule__XContext__Group_5__0");
					put(grammarAccess.getXContextAccess().getGroup_6(), "rule__XContext__Group_6__0");
					put(grammarAccess.getXContextAccess().getGroup_7(), "rule__XContext__Group_7__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getXCarrierSetAccess().getGroup(), "rule__XCarrierSet__Group__0");
					put(grammarAccess.getXConstantAccess().getGroup(), "rule__XConstant__Group__0");
					put(grammarAccess.getXAxiomAccess().getGroup(), "rule__XAxiom__Group__0");
					put(grammarAccess.getEVENTB_EXPRESSION_SYMBOLSAccess().getGroup_32(), "rule__EVENTB_EXPRESSION_SYMBOLS__Group_32__0");
					put(grammarAccess.getXContextAccess().getCommentAssignment_1(), "rule__XContext__CommentAssignment_1");
					put(grammarAccess.getXContextAccess().getNameAssignment_3(), "rule__XContext__NameAssignment_3");
					put(grammarAccess.getXContextAccess().getExtendsAssignment_4_1(), "rule__XContext__ExtendsAssignment_4_1");
					put(grammarAccess.getXContextAccess().getSetsAssignment_5_1(), "rule__XContext__SetsAssignment_5_1");
					put(grammarAccess.getXContextAccess().getConstantsAssignment_6_1(), "rule__XContext__ConstantsAssignment_6_1");
					put(grammarAccess.getXContextAccess().getAxiomsAssignment_7_1(), "rule__XContext__AxiomsAssignment_7_1");
					put(grammarAccess.getXCarrierSetAccess().getNameAssignment_1(), "rule__XCarrierSet__NameAssignment_1");
					put(grammarAccess.getXConstantAccess().getNameAssignment_1(), "rule__XConstant__NameAssignment_1");
					put(grammarAccess.getXAxiomAccess().getNameAssignment_1(), "rule__XAxiom__NameAssignment_1");
					put(grammarAccess.getXAxiomAccess().getPredicateAssignment_2(), "rule__XAxiom__PredicateAssignment_2");
					put(grammarAccess.getXAxiomAccess().getTheoremAssignment_3(), "rule__XAxiom__TheoremAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XContextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XContextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
