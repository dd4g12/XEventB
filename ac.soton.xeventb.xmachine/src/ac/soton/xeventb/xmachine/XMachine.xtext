/*******************************************************************************
 * Copyright (c) 2016-2018 University of Southampton.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     University of Southampton - initial API and implementation
 *******************************************************************************/
grammar ac.soton.xeventb.xmachine.XMachine with org.eclipse.xtext.common.Terminals hidden (WS,ML_COMMENT,SL_COMMENT)

//import "http://emf.eventb.org/models/core/2014" as eventbcore
//import "http://emf.eventb.org/models/core/machine/2014" as emachine
//import "http://emf.eventb.org/models/core/context/2014" as econtext
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://soton.ac.uk/models/eventb/inclusion/2017" as einclusion 
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore" as eventbcore
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore#//machine"as emachine
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore#//context"as econtext
import "http://soton.ac.uk/models/eventb/coreextension/2014" as eventbcoreextension

/* DD4G12
 * For XEvent-B 0.0.8 comments are allowed everywhere
 * ML_COMMENT and SL_COMMEN are defined as hidden
 * Introducing event groups/cases and their synchronisation
 */

Machine returns emachine::Machine:
	{emachine::Machine}
	'machine' name=ID
   ( ('refines' refines+=[emachine::Machine])?&('sees' sees+=[econtext::Context]+)?&( extensions+= MIncludes*)) // allow different order
//	('sees' sees+=[econtext::Context]+)?
//	( extensions+= MIncludes*)
    ('variables' variables+=XVariable+)?
	('invariants' invariants+=XInvariant+)?
	('variants' variants +=XVariant+)?
	('events' events+=XEvent (events+=XEvent)*)? 
	(extensions+= XGroup*)
	('end')
;

MIncludes returns einclusion::MachineInclusion:
	{einclusion::MachineInclusion}
	('includes'abstractMachine = [emachine::Machine|QualifiedName])
	('to' concreteMachine = [emachine::Machine])? 
    ('as' prefixes += ID (prefixes += ID)*)? 
;

QualifiedName:
	ID('.'ID)?
;

XVariable returns emachine::Variable:
	{emachine::Variable}
	name=ID
;

XInvariant returns emachine::Invariant:
	{emachine::Invariant}
	(theorem?='theorem')? name=XLABEL predicate=XFormula	
;

terminal XLABEL returns ecore::EString:
	'@' !(':')+ ':'
;

XVariant returns emachine::Variant:
	{emachine::Variant}
	name=XLABEL expression= XFormula
;

XGroup returns eventbcoreextension::EventCases:
	{eventbcoreextension::EventCases}
	'group' name = ID
	('(' formalParameters += XFormalParameter (',' formalParameters += XFormalParameter)* ')')?
	('begin' events +=[emachine::Event]( events +=[emachine::Event])*)? //removed comma unordered list
	'end'
;

XFormalParameter returns eventbcoreextension::FormalParameter:
	{eventbcoreextension::FormalParameter}
	direction = XDirection name = ID
;

enum XDirection returns eventbcoreextension::INOUT:
	in = 'in' | out = 'out'
;

XEvent returns emachine::Event:
	{emachine::Event}
	(convergence=XConvergence)?
	'event' name=ID
	(
		('refines' refines+=[emachine::Event]+) |
		(extended?='extends' refines+=[emachine::Event])
	)?
	('any' parameters+=XParameter+)?
	( extensions+= XGroupOrEvent*)//new
	('where' guards+=XGuard+)?
	('then' actions+=XAction+)?
	('with' witnesses+=XWitness+)?
	'end'
;

EventSync returns einclusion::EventSynchronisation:
	{einclusion::EventSynchronisation}
	('synchronises' 'event' (prefix=ID'.')?(synchronisedEvent = [emachine::Event]))(XSyncParameters)?
//	( (prefix=ID'.')?(synchronisedEvent = [emachine::Event]))
;

XSyncParameters returns ecore::EString:
	('[' ID+ ']')//STRING
;
GroupSync returns einclusion::EventSynchronisation:
	{einclusion::EventSynchronisation}
  //  ( (prefix=ID'.')?(synchronisedCases = [eventbcoreextension::EventCases]))('(' actualParameters += ID (',' actualParameters += ID)* ')')? 
	('synchronises'  (prefix=ID'.')?(synchronisedCases = [eventbcoreextension::EventCases]))('(' actualParameters += XPar (',' actualParameters += XPar)* ')')? 
;
XGroupOrEvent returns einclusion::EventSynchronisation:
 GroupSync | EventSync
//'synchronises' GroupSync | EventSync
;
enum XConvergence returns emachine::Convergence:
	ordinary = 'ordinary' | convergent = 'convergent' | anticipated = 'anticipated'
;

XParameter returns emachine::Parameter:
	{emachine::Parameter}
	name=ID
;

XGuard returns emachine::Guard:
	{emachine::Guard}
	(theorem?='theorem')? name=XLABEL predicate= XFormula
;

XWitness returns emachine::Witness:
	{emachine::Witness}
	name=XLABEL predicate= XFormula
;

XAction returns emachine::Action:
	{emachine::Action}
	name=XLABEL action= XFormula
;

XPar returns ecore::EString:
	STRING
;
XFormula returns ecore::EString:
	(
		EVENTB_IDENTIFIER_KEYWORD |
		EVENTB_PREDICATE_SYMBOLS |
		EVENTB_EXPRESSION_SYMBOLS |
		ID |
		INT
	)+ 
;

EVENTB_IDENTIFIER_KEYWORD returns ecore::EString:
	'BOOL' |
	'FALSE' |
	'TRUE' |
	'bool' |
	'card' |
	'dom' |
	'finite' |
	'id' |
	'inter' |
	'max' |
	'min' |
	'mod' |
	'pred' |
	'prj1' |
	'prj2' |
	'ran' |
	'succ' |
	'union' |
	'ℕ1' |
	'ℕ' |
	'ℙ1' |
	'ℙ' |
	'ℤ'
;

EVENTB_PREDICATE_SYMBOLS returns ecore::EString:
	'(' | // Predicate calculus symbols
	')' |
	'⇔' | 
	'⇒' |
	'∧' | '&' |
	'∨' |
	'¬' |
	'⊤' |
	'⊥' |
	'∀' | '!' |
	'∃' | '#' |
	',' |
	'·' | '.' |
	'=' | // Build predicates from expressions
	'≠' |
	'≤' |
	'<' |
	'≥' |
	'>' |
	'∈' | ':' | // Include this for Rodin keyboard
	'∉' | 
	'⊂' |
	'⊄' |
	'⊆' |
	'⊈' |
	'partition' // This is missing from the Rodin D7 deliverable
;

EVENTB_EXPRESSION_SYMBOLS returns ecore::EString:
	'↔' | // Symbols for building set of relations
	'' |
	'' |
	'' |
	'⇸' |
	'→' |
	'⤔' |
	'↣' |
	'⤀' |
	'↠' |
	'⤖' |
	'{' | // Symbols for manipulating sets
	'}' |
	'↦' |
	'∅' |
	'∩' |
	'∪' |
	'∖' |
	'×' |
	'[' | // Symbols for manipulating functions and relations
	']' |
	'' |
	'∘' |
	';' |
	'⊗' |
	'∥' |
	'∼' |
	'◁' |
	'⩤' |
	'▷' |
	'⩥' |
	'λ' | '%' // Symbols for quantified expressions
	'⋂' |
	'⋃' |
	'∣' |
	'‥' | // Symbols for arithmetic expressions
	'+' |
	'−' | '-' |
	'∗' | '*' |
	'÷' | '/' | 
	'^' |
	'\\' // Allowed for LaTeX combos
;

@Override 
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ') ('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ'|'0'..'9' | "'")*;

@Override 
terminal STRING: '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';
