/*
 * generated by Xtext 2.15.0
 */
package ac.soton.xeventb.xmachine.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cRefinesKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cRefinesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cRefinesMachineCrossReference_3_0_1_0 = (CrossReference)cRefinesAssignment_3_0_1.eContents().get(0);
		private final RuleCall cRefinesMachineIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cRefinesMachineCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSeesKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSeesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cSeesContextCrossReference_3_1_1_0 = (CrossReference)cSeesAssignment_3_1_1.eContents().get(0);
		private final RuleCall cSeesContextIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cSeesContextCrossReference_3_1_1_0.eContents().get(1);
		private final Assignment cExtensionsAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cExtensionsMIncludesParserRuleCall_3_2_0 = (RuleCall)cExtensionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVariablesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesXVariableParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInvariantsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInvariantsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInvariantsXInvariantParserRuleCall_5_1_0 = (RuleCall)cInvariantsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVariantsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVariantsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVariantsXVariantParserRuleCall_6_1_0 = (RuleCall)cVariantsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEventsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cEventsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cEventsXEventParserRuleCall_7_1_0 = (RuleCall)cEventsAssignment_7_1.eContents().get(0);
		private final Assignment cEventsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cEventsXEventParserRuleCall_7_2_0 = (RuleCall)cEventsAssignment_7_2.eContents().get(0);
		private final Assignment cExtensionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExtensionsXGroupParserRuleCall_8_0 = (RuleCall)cExtensionsAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///* DD4G12
		// * For XEvent-B 0.0.8 comments are allowed everywhere
		// * ML_COMMENT and SL_COMMEN are defined as hidden
		// * Introducing event groups/cases and their synchronisation
		// */ Machine emachine::Machine:
		//	{emachine::Machine}
		//	'machine' name=ID (('refines' refines+=[emachine::Machine])? & ('sees' sees+=[econtext::Context]+)? &
		//	extensions+=MIncludes*) ('variables' variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variants'
		//	variants+=XVariant+)? ('events' events+=XEvent events+=XEvent*)?
		//	extensions+=XGroup* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Machine} 'machine' name=ID (('refines' refines+=[emachine::Machine])? & ('sees' sees+=[econtext::Context]+)?
		//& extensions+=MIncludes*) ('variables' variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variants'
		//variants+=XVariant+)? ('events' events+=XEvent events+=XEvent*)? extensions+=XGroup* 'end'
		public Group getGroup() { return cGroup; }
		
		//{emachine::Machine}
		public Action getMachineAction_0() { return cMachineAction_0; }
		
		//'machine'
		public Keyword getMachineKeyword_1() { return cMachineKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('refines' refines+=[emachine::Machine])? & ('sees' sees+=[econtext::Context]+)? & extensions+=MIncludes*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('refines' refines+=[emachine::Machine])?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'refines'
		public Keyword getRefinesKeyword_3_0_0() { return cRefinesKeyword_3_0_0; }
		
		//refines+=[emachine::Machine]
		public Assignment getRefinesAssignment_3_0_1() { return cRefinesAssignment_3_0_1; }
		
		//[emachine::Machine]
		public CrossReference getRefinesMachineCrossReference_3_0_1_0() { return cRefinesMachineCrossReference_3_0_1_0; }
		
		//ID
		public RuleCall getRefinesMachineIDTerminalRuleCall_3_0_1_0_1() { return cRefinesMachineIDTerminalRuleCall_3_0_1_0_1; }
		
		//('sees' sees+=[econtext::Context]+)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'sees'
		public Keyword getSeesKeyword_3_1_0() { return cSeesKeyword_3_1_0; }
		
		//sees+=[econtext::Context]+
		public Assignment getSeesAssignment_3_1_1() { return cSeesAssignment_3_1_1; }
		
		//[econtext::Context]
		public CrossReference getSeesContextCrossReference_3_1_1_0() { return cSeesContextCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getSeesContextIDTerminalRuleCall_3_1_1_0_1() { return cSeesContextIDTerminalRuleCall_3_1_1_0_1; }
		
		//extensions+=MIncludes*
		public Assignment getExtensionsAssignment_3_2() { return cExtensionsAssignment_3_2; }
		
		//MIncludes
		public RuleCall getExtensionsMIncludesParserRuleCall_3_2_0() { return cExtensionsMIncludesParserRuleCall_3_2_0; }
		
		//('variables' variables+=XVariable+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'variables'
		public Keyword getVariablesKeyword_4_0() { return cVariablesKeyword_4_0; }
		
		//variables+=XVariable+
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }
		
		//XVariable
		public RuleCall getVariablesXVariableParserRuleCall_4_1_0() { return cVariablesXVariableParserRuleCall_4_1_0; }
		
		//('invariants' invariants+=XInvariant+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'invariants'
		public Keyword getInvariantsKeyword_5_0() { return cInvariantsKeyword_5_0; }
		
		//invariants+=XInvariant+
		public Assignment getInvariantsAssignment_5_1() { return cInvariantsAssignment_5_1; }
		
		//XInvariant
		public RuleCall getInvariantsXInvariantParserRuleCall_5_1_0() { return cInvariantsXInvariantParserRuleCall_5_1_0; }
		
		//('variants' variants+=XVariant+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'variants'
		public Keyword getVariantsKeyword_6_0() { return cVariantsKeyword_6_0; }
		
		//variants+=XVariant+
		public Assignment getVariantsAssignment_6_1() { return cVariantsAssignment_6_1; }
		
		//XVariant
		public RuleCall getVariantsXVariantParserRuleCall_6_1_0() { return cVariantsXVariantParserRuleCall_6_1_0; }
		
		//('events' events+=XEvent events+=XEvent*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'events'
		public Keyword getEventsKeyword_7_0() { return cEventsKeyword_7_0; }
		
		//events+=XEvent
		public Assignment getEventsAssignment_7_1() { return cEventsAssignment_7_1; }
		
		//XEvent
		public RuleCall getEventsXEventParserRuleCall_7_1_0() { return cEventsXEventParserRuleCall_7_1_0; }
		
		//events+=XEvent*
		public Assignment getEventsAssignment_7_2() { return cEventsAssignment_7_2; }
		
		//XEvent
		public RuleCall getEventsXEventParserRuleCall_7_2_0() { return cEventsXEventParserRuleCall_7_2_0; }
		
		//extensions+=XGroup*
		public Assignment getExtensionsAssignment_8() { return cExtensionsAssignment_8; }
		
		//XGroup
		public RuleCall getExtensionsXGroupParserRuleCall_8_0() { return cExtensionsXGroupParserRuleCall_8_0; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class MIncludesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.MIncludes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineInclusionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIncludesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAbstractMachineAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAbstractMachineMachineCrossReference_1_1_0 = (CrossReference)cAbstractMachineAssignment_1_1.eContents().get(0);
		private final RuleCall cAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cAbstractMachineMachineCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConcreteMachineAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cConcreteMachineMachineCrossReference_2_1_0 = (CrossReference)cConcreteMachineAssignment_2_1.eContents().get(0);
		private final RuleCall cConcreteMachineMachineIDTerminalRuleCall_2_1_0_1 = (RuleCall)cConcreteMachineMachineCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixesIDTerminalRuleCall_3_1_0 = (RuleCall)cPrefixesAssignment_3_1.eContents().get(0);
		private final Assignment cPrefixesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPrefixesIDTerminalRuleCall_3_2_0 = (RuleCall)cPrefixesAssignment_3_2.eContents().get(0);
		
		//MIncludes einclusion::MachineInclusion:
		//	{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
		//	concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
		//concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup() { return cGroup; }
		
		//{einclusion::MachineInclusion}
		public Action getMachineInclusionAction_0() { return cMachineInclusionAction_0; }
		
		//'includes' abstractMachine=[emachine::Machine|QualifiedName]
		public Group getGroup_1() { return cGroup_1; }
		
		//'includes'
		public Keyword getIncludesKeyword_1_0() { return cIncludesKeyword_1_0; }
		
		//abstractMachine=[emachine::Machine|QualifiedName]
		public Assignment getAbstractMachineAssignment_1_1() { return cAbstractMachineAssignment_1_1; }
		
		//[emachine::Machine|QualifiedName]
		public CrossReference getAbstractMachineMachineCrossReference_1_1_0() { return cAbstractMachineMachineCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1() { return cAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1; }
		
		//('to' concreteMachine=[emachine::Machine])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'to'
		public Keyword getToKeyword_2_0() { return cToKeyword_2_0; }
		
		//concreteMachine=[emachine::Machine]
		public Assignment getConcreteMachineAssignment_2_1() { return cConcreteMachineAssignment_2_1; }
		
		//[emachine::Machine]
		public CrossReference getConcreteMachineMachineCrossReference_2_1_0() { return cConcreteMachineMachineCrossReference_2_1_0; }
		
		//ID
		public RuleCall getConcreteMachineMachineIDTerminalRuleCall_2_1_0_1() { return cConcreteMachineMachineIDTerminalRuleCall_2_1_0_1; }
		
		//('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//prefixes+=ID
		public Assignment getPrefixesAssignment_3_1() { return cPrefixesAssignment_3_1; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_3_1_0() { return cPrefixesIDTerminalRuleCall_3_1_0; }
		
		//prefixes+=ID*
		public Assignment getPrefixesAssignment_3_2() { return cPrefixesAssignment_3_2; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_3_2_0() { return cPrefixesIDTerminalRuleCall_3_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class XVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XVariable emachine::Variable:
		//	{emachine::Variable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTheoremAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTheoremTheoremKeyword_1_0 = (Keyword)cTheoremAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateXFormulaParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		
		//XInvariant emachine::Invariant:
		//	{emachine::Invariant} theorem?='theorem'? name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Invariant} theorem?='theorem'? name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_1() { return cTheoremAssignment_1; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_1_0() { return cTheoremTheoremKeyword_1_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_3_0() { return cPredicateXFormulaParserRuleCall_3_0; }
	}
	public class XVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXFormulaParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//XVariant emachine::Variant:
		//	{emachine::Variant} name=XLABEL expression=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variant} name=XLABEL expression=XFormula
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//expression=XFormula
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//XFormula
		public RuleCall getExpressionXFormulaParserRuleCall_2_0() { return cExpressionXFormulaParserRuleCall_2_0; }
	}
	public class XGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventCasesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFormalParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFormalParametersXFormalParameterParserRuleCall_3_1_0 = (RuleCall)cFormalParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFormalParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cFormalParametersXFormalParameterParserRuleCall_3_2_1_0 = (RuleCall)cFormalParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBeginKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEventsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEventsEventCrossReference_4_1_0 = (CrossReference)cEventsAssignment_4_1.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_4_1_0_1 = (RuleCall)cEventsEventCrossReference_4_1_0.eContents().get(1);
		private final Assignment cEventsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cEventsEventCrossReference_4_2_0 = (CrossReference)cEventsAssignment_4_2.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_4_2_0_1 = (RuleCall)cEventsEventCrossReference_4_2_0.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XGroup eventbcoreextension::EventCases:
		//	{eventbcoreextension::EventCases}
		//	'group' name=ID ('(' formalParameters+=XFormalParameter (',' formalParameters+=XFormalParameter)* ')')? ('begin'
		//	events+=[emachine::Event] events+=[emachine::Event]*)? //removed comma unordered list
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{eventbcoreextension::EventCases} 'group' name=ID ('(' formalParameters+=XFormalParameter (','
		//formalParameters+=XFormalParameter)* ')')? ('begin' events+=[emachine::Event] events+=[emachine::Event]*)? //removed comma unordered list
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{eventbcoreextension::EventCases}
		public Action getEventCasesAction_0() { return cEventCasesAction_0; }
		
		//'group'
		public Keyword getGroupKeyword_1() { return cGroupKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' formalParameters+=XFormalParameter (',' formalParameters+=XFormalParameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//formalParameters+=XFormalParameter
		public Assignment getFormalParametersAssignment_3_1() { return cFormalParametersAssignment_3_1; }
		
		//XFormalParameter
		public RuleCall getFormalParametersXFormalParameterParserRuleCall_3_1_0() { return cFormalParametersXFormalParameterParserRuleCall_3_1_0; }
		
		//(',' formalParameters+=XFormalParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//formalParameters+=XFormalParameter
		public Assignment getFormalParametersAssignment_3_2_1() { return cFormalParametersAssignment_3_2_1; }
		
		//XFormalParameter
		public RuleCall getFormalParametersXFormalParameterParserRuleCall_3_2_1_0() { return cFormalParametersXFormalParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('begin' events+=[emachine::Event] events+=[emachine::Event]*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'begin'
		public Keyword getBeginKeyword_4_0() { return cBeginKeyword_4_0; }
		
		//events+=[emachine::Event]
		public Assignment getEventsAssignment_4_1() { return cEventsAssignment_4_1; }
		
		//[emachine::Event]
		public CrossReference getEventsEventCrossReference_4_1_0() { return cEventsEventCrossReference_4_1_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_4_1_0_1() { return cEventsEventIDTerminalRuleCall_4_1_0_1; }
		
		//events+=[emachine::Event]*
		public Assignment getEventsAssignment_4_2() { return cEventsAssignment_4_2; }
		
		//[emachine::Event]
		public CrossReference getEventsEventCrossReference_4_2_0() { return cEventsEventCrossReference_4_2_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_4_2_0_1() { return cEventsEventIDTerminalRuleCall_4_2_0_1; }
		
		////removed comma unordered list
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class XFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionXDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XFormalParameter eventbcoreextension::FormalParameter:
		//	{eventbcoreextension::FormalParameter} direction=XDirection name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{eventbcoreextension::FormalParameter} direction=XDirection name=ID
		public Group getGroup() { return cGroup; }
		
		//{eventbcoreextension::FormalParameter}
		public Action getFormalParameterAction_0() { return cFormalParameterAction_0; }
		
		//direction=XDirection
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//XDirection
		public RuleCall getDirectionXDirectionEnumRuleCall_1_0() { return cDirectionXDirectionEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class XEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConvergenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConvergenceXConvergenceEnumRuleCall_1_0 = (RuleCall)cConvergenceAssignment_1.eContents().get(0);
		private final Keyword cEventKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cRefinesKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cRefinesAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final CrossReference cRefinesEventCrossReference_4_0_1_0 = (CrossReference)cRefinesAssignment_4_0_1.eContents().get(0);
		private final RuleCall cRefinesEventIDTerminalRuleCall_4_0_1_0_1 = (RuleCall)cRefinesEventCrossReference_4_0_1_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cExtendedAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final Keyword cExtendedExtendsKeyword_4_1_0_0 = (Keyword)cExtendedAssignment_4_1_0.eContents().get(0);
		private final Assignment cRefinesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cRefinesEventCrossReference_4_1_1_0 = (CrossReference)cRefinesAssignment_4_1_1.eContents().get(0);
		private final RuleCall cRefinesEventIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cRefinesEventCrossReference_4_1_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAnyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersXParameterParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExtensionsXGroupOrEventParserRuleCall_6_0 = (RuleCall)cExtensionsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWhereKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGuardsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGuardsXGuardParserRuleCall_7_1_0 = (RuleCall)cGuardsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cThenKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cActionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_8_1_0 = (RuleCall)cActionsAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cWithKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cWitnessesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_9_1_0 = (RuleCall)cWitnessesAssignment_9_1.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//XEvent emachine::Event:
		//	{emachine::Event} convergence=XConvergence?
		//	'event' name=ID ('refines' refines+=[emachine::Event]+ | extended?='extends' refines+=[emachine::Event])? ('any'
		//	parameters+=XParameter+)?
		//	extensions+=XGroupOrEvent* ('where' guards+=XGuard+)? ('then' actions+=XAction+)? ('with' witnesses+=XWitness+)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Event} convergence=XConvergence? 'event' name=ID ('refines' refines+=[emachine::Event]+ | extended?='extends'
		//refines+=[emachine::Event])? ('any' parameters+=XParameter+)? extensions+=XGroupOrEvent* ('where' guards+=XGuard+)?
		//('then' actions+=XAction+)? ('with' witnesses+=XWitness+)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{emachine::Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//convergence=XConvergence?
		public Assignment getConvergenceAssignment_1() { return cConvergenceAssignment_1; }
		
		//XConvergence
		public RuleCall getConvergenceXConvergenceEnumRuleCall_1_0() { return cConvergenceXConvergenceEnumRuleCall_1_0; }
		
		//'event'
		public Keyword getEventKeyword_2() { return cEventKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('refines' refines+=[emachine::Event]+ | extended?='extends' refines+=[emachine::Event])?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'refines' refines+=[emachine::Event]+
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'refines'
		public Keyword getRefinesKeyword_4_0_0() { return cRefinesKeyword_4_0_0; }
		
		//refines+=[emachine::Event]+
		public Assignment getRefinesAssignment_4_0_1() { return cRefinesAssignment_4_0_1; }
		
		//[emachine::Event]
		public CrossReference getRefinesEventCrossReference_4_0_1_0() { return cRefinesEventCrossReference_4_0_1_0; }
		
		//ID
		public RuleCall getRefinesEventIDTerminalRuleCall_4_0_1_0_1() { return cRefinesEventIDTerminalRuleCall_4_0_1_0_1; }
		
		//extended?='extends' refines+=[emachine::Event]
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//extended?='extends'
		public Assignment getExtendedAssignment_4_1_0() { return cExtendedAssignment_4_1_0; }
		
		//'extends'
		public Keyword getExtendedExtendsKeyword_4_1_0_0() { return cExtendedExtendsKeyword_4_1_0_0; }
		
		//refines+=[emachine::Event]
		public Assignment getRefinesAssignment_4_1_1() { return cRefinesAssignment_4_1_1; }
		
		//[emachine::Event]
		public CrossReference getRefinesEventCrossReference_4_1_1_0() { return cRefinesEventCrossReference_4_1_1_0; }
		
		//ID
		public RuleCall getRefinesEventIDTerminalRuleCall_4_1_1_0_1() { return cRefinesEventIDTerminalRuleCall_4_1_1_0_1; }
		
		//('any' parameters+=XParameter+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'any'
		public Keyword getAnyKeyword_5_0() { return cAnyKeyword_5_0; }
		
		//parameters+=XParameter+
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }
		
		//XParameter
		public RuleCall getParametersXParameterParserRuleCall_5_1_0() { return cParametersXParameterParserRuleCall_5_1_0; }
		
		//extensions+=XGroupOrEvent*
		public Assignment getExtensionsAssignment_6() { return cExtensionsAssignment_6; }
		
		//XGroupOrEvent
		public RuleCall getExtensionsXGroupOrEventParserRuleCall_6_0() { return cExtensionsXGroupOrEventParserRuleCall_6_0; }
		
		//('where' guards+=XGuard+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'where'
		public Keyword getWhereKeyword_7_0() { return cWhereKeyword_7_0; }
		
		//guards+=XGuard+
		public Assignment getGuardsAssignment_7_1() { return cGuardsAssignment_7_1; }
		
		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_7_1_0() { return cGuardsXGuardParserRuleCall_7_1_0; }
		
		//('then' actions+=XAction+)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'then'
		public Keyword getThenKeyword_8_0() { return cThenKeyword_8_0; }
		
		//actions+=XAction+
		public Assignment getActionsAssignment_8_1() { return cActionsAssignment_8_1; }
		
		//XAction
		public RuleCall getActionsXActionParserRuleCall_8_1_0() { return cActionsXActionParserRuleCall_8_1_0; }
		
		//('with' witnesses+=XWitness+)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'with'
		public Keyword getWithKeyword_9_0() { return cWithKeyword_9_0; }
		
		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_9_1() { return cWitnessesAssignment_9_1; }
		
		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_9_1_0() { return cWitnessesXWitnessParserRuleCall_9_1_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class EventSyncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.EventSync");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventSynchronisationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSynchronisesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEventKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cPrefixAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cPrefixIDTerminalRuleCall_1_2_0_0 = (RuleCall)cPrefixAssignment_1_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cSynchronisedEventAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cSynchronisedEventEventCrossReference_1_3_0 = (CrossReference)cSynchronisedEventAssignment_1_3.eContents().get(0);
		private final RuleCall cSynchronisedEventEventIDTerminalRuleCall_1_3_0_1 = (RuleCall)cSynchronisedEventEventCrossReference_1_3_0.eContents().get(1);
		private final RuleCall cXSyncParametersParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EventSync einclusion::EventSynchronisation:
		//	{einclusion::EventSynchronisation} ('synchronises' 'event' (prefix=ID '.')? synchronisedEvent=[emachine::Event])
		//	XSyncParameters?
		//	//	( (prefix=ID'.')?(synchronisedEvent = [emachine::Event]))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{einclusion::EventSynchronisation} ('synchronises' 'event' (prefix=ID '.')? synchronisedEvent=[emachine::Event])
		//XSyncParameters?
		public Group getGroup() { return cGroup; }
		
		//{einclusion::EventSynchronisation}
		public Action getEventSynchronisationAction_0() { return cEventSynchronisationAction_0; }
		
		//'synchronises' 'event' (prefix=ID '.')? synchronisedEvent=[emachine::Event]
		public Group getGroup_1() { return cGroup_1; }
		
		//'synchronises'
		public Keyword getSynchronisesKeyword_1_0() { return cSynchronisesKeyword_1_0; }
		
		//'event'
		public Keyword getEventKeyword_1_1() { return cEventKeyword_1_1; }
		
		//(prefix=ID '.')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//prefix=ID
		public Assignment getPrefixAssignment_1_2_0() { return cPrefixAssignment_1_2_0; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_1_2_0_0() { return cPrefixIDTerminalRuleCall_1_2_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_1() { return cFullStopKeyword_1_2_1; }
		
		//synchronisedEvent=[emachine::Event]
		public Assignment getSynchronisedEventAssignment_1_3() { return cSynchronisedEventAssignment_1_3; }
		
		//[emachine::Event]
		public CrossReference getSynchronisedEventEventCrossReference_1_3_0() { return cSynchronisedEventEventCrossReference_1_3_0; }
		
		//ID
		public RuleCall getSynchronisedEventEventIDTerminalRuleCall_1_3_0_1() { return cSynchronisedEventEventIDTerminalRuleCall_1_3_0_1; }
		
		//XSyncParameters?
		public RuleCall getXSyncParametersParserRuleCall_2() { return cXSyncParametersParserRuleCall_2; }
	}
	public class XSyncParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XSyncParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XSyncParameters:
		//	'[' ID+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ID+ ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//ID+
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class GroupSyncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.GroupSync");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventSynchronisationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSynchronisesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cPrefixAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPrefixIDTerminalRuleCall_1_1_0_0 = (RuleCall)cPrefixAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSynchronisedCasesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cSynchronisedCasesEventCasesCrossReference_1_2_0 = (CrossReference)cSynchronisedCasesAssignment_1_2.eContents().get(0);
		private final RuleCall cSynchronisedCasesEventCasesIDTerminalRuleCall_1_2_0_1 = (RuleCall)cSynchronisedCasesEventCasesCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActualParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActualParametersXParParserRuleCall_2_1_0 = (RuleCall)cActualParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cActualParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cActualParametersXParParserRuleCall_2_2_1_0 = (RuleCall)cActualParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//GroupSync einclusion::EventSynchronisation:
		//	{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')?
		//	synchronisedCases=[eventbcoreextension::EventCases]) ('(' actualParameters+=XPar (',' actualParameters+=XPar)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')? synchronisedCases=[eventbcoreextension::EventCases])
		//('(' actualParameters+=XPar (',' actualParameters+=XPar)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{einclusion::EventSynchronisation}
		public Action getEventSynchronisationAction_0() { return cEventSynchronisationAction_0; }
		
		////  ( (prefix=ID'.')?(synchronisedCases = [eventbcoreextension::EventCases]))('(' actualParameters += ID (',' actualParameters += ID)* ')')? 
		//'synchronises' (prefix=ID '.')? synchronisedCases=[eventbcoreextension::EventCases]
		public Group getGroup_1() { return cGroup_1; }
		
		//'synchronises'
		public Keyword getSynchronisesKeyword_1_0() { return cSynchronisesKeyword_1_0; }
		
		//(prefix=ID '.')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//prefix=ID
		public Assignment getPrefixAssignment_1_1_0() { return cPrefixAssignment_1_1_0; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_1_1_0_0() { return cPrefixIDTerminalRuleCall_1_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//synchronisedCases=[eventbcoreextension::EventCases]
		public Assignment getSynchronisedCasesAssignment_1_2() { return cSynchronisedCasesAssignment_1_2; }
		
		//[eventbcoreextension::EventCases]
		public CrossReference getSynchronisedCasesEventCasesCrossReference_1_2_0() { return cSynchronisedCasesEventCasesCrossReference_1_2_0; }
		
		//ID
		public RuleCall getSynchronisedCasesEventCasesIDTerminalRuleCall_1_2_0_1() { return cSynchronisedCasesEventCasesIDTerminalRuleCall_1_2_0_1; }
		
		//('(' actualParameters+=XPar (',' actualParameters+=XPar)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//actualParameters+=XPar
		public Assignment getActualParametersAssignment_2_1() { return cActualParametersAssignment_2_1; }
		
		//XPar
		public RuleCall getActualParametersXParParserRuleCall_2_1_0() { return cActualParametersXParParserRuleCall_2_1_0; }
		
		//(',' actualParameters+=XPar)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//actualParameters+=XPar
		public Assignment getActualParametersAssignment_2_2_1() { return cActualParametersAssignment_2_2_1; }
		
		//XPar
		public RuleCall getActualParametersXParParserRuleCall_2_2_1_0() { return cActualParametersXParParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class XGroupOrEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGroupOrEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGroupSyncParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventSyncParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XGroupOrEvent einclusion::EventSynchronisation:
		//	GroupSync | EventSync
		//	//'synchronises' GroupSync | EventSync
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GroupSync | EventSync
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GroupSync
		public RuleCall getGroupSyncParserRuleCall_0() { return cGroupSyncParserRuleCall_0; }
		
		//EventSync
		public RuleCall getEventSyncParserRuleCall_1() { return cEventSyncParserRuleCall_1; }
	}
	public class XParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XParameter emachine::Parameter:
		//	{emachine::Parameter} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Parameter} name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTheoremAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTheoremTheoremKeyword_1_0 = (Keyword)cTheoremAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateXFormulaParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		
		//XGuard emachine::Guard:
		//	{emachine::Guard} theorem?='theorem'? name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Guard} theorem?='theorem'? name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_1() { return cTheoremAssignment_1; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_1_0() { return cTheoremTheoremKeyword_1_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_3_0() { return cPredicateXFormulaParserRuleCall_3_0; }
	}
	public class XWitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XWitness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXFormulaParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//XWitness emachine::Witness:
		//	{emachine::Witness} name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Witness} name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_2_0() { return cPredicateXFormulaParserRuleCall_2_0; }
	}
	public class XActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionXFormulaParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//XAction emachine::Action:
		//	{emachine::Action} name=XLABEL action=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Action} name=XLABEL action=XFormula
		public Group getGroup() { return cGroup; }
		
		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//action=XFormula
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//XFormula
		public RuleCall getActionXFormulaParserRuleCall_2_0() { return cActionXFormulaParserRuleCall_2_0; }
	}
	public class XParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XPar");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XPar:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class XFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEVENTB_PREDICATE_SYMBOLSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//XFormula:
		//	(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EVENTB_IDENTIFIER_KEYWORD
		public RuleCall getEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0() { return cEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0; }
		
		//EVENTB_PREDICATE_SYMBOLS
		public RuleCall getEVENTB_PREDICATE_SYMBOLSParserRuleCall_1() { return cEVENTB_PREDICATE_SYMBOLSParserRuleCall_1; }
		
		//EVENTB_EXPRESSION_SYMBOLS
		public RuleCall getEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2() { return cEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class EVENTB_IDENTIFIER_KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.EVENTB_IDENTIFIER_KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFALSEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTRUEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCardKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDomKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFiniteKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cIdKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInterKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMaxKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMinKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cModKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPredKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cPrj1Keyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cPrj2Keyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cRanKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSuccKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUnionKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cDoubleStruckCapitalNDigitOneKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cDoubleStruckCapitalNKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cDoubleStruckCapitalPDigitOneKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cDoubleStruckCapitalPKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cDoubleStruckCapitalZKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		
		//EVENTB_IDENTIFIER_KEYWORD:
		//	'BOOL' |
		//	'FALSE' |
		//	'TRUE' |
		//	'bool' |
		//	'card' |
		//	'dom' |
		//	'finite' |
		//	'id' |
		//	'inter' |
		//	'max' |
		//	'min' |
		//	'mod' |
		//	'pred' |
		//	'prj1' |
		//	'prj2' |
		//	'ran' |
		//	'succ' |
		//	'union' |
		//	'ℕ1' |
		//	'ℕ' |
		//	'ℙ1' |
		//	'ℙ' |
		//	'ℤ';
		@Override public ParserRule getRule() { return rule; }
		
		//'BOOL' | 'FALSE' | 'TRUE' | 'bool' | 'card' | 'dom' | 'finite' | 'id' | 'inter' | 'max' | 'min' | 'mod' | 'pred' |
		//'prj1' | 'prj2' | 'ran' | 'succ' | 'union' | 'ℕ1' | 'ℕ' | 'ℙ1' | 'ℙ' | 'ℤ'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_1() { return cFALSEKeyword_1; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_2() { return cTRUEKeyword_2; }
		
		//'bool'
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }
		
		//'card'
		public Keyword getCardKeyword_4() { return cCardKeyword_4; }
		
		//'dom'
		public Keyword getDomKeyword_5() { return cDomKeyword_5; }
		
		//'finite'
		public Keyword getFiniteKeyword_6() { return cFiniteKeyword_6; }
		
		//'id'
		public Keyword getIdKeyword_7() { return cIdKeyword_7; }
		
		//'inter'
		public Keyword getInterKeyword_8() { return cInterKeyword_8; }
		
		//'max'
		public Keyword getMaxKeyword_9() { return cMaxKeyword_9; }
		
		//'min'
		public Keyword getMinKeyword_10() { return cMinKeyword_10; }
		
		//'mod'
		public Keyword getModKeyword_11() { return cModKeyword_11; }
		
		//'pred'
		public Keyword getPredKeyword_12() { return cPredKeyword_12; }
		
		//'prj1'
		public Keyword getPrj1Keyword_13() { return cPrj1Keyword_13; }
		
		//'prj2'
		public Keyword getPrj2Keyword_14() { return cPrj2Keyword_14; }
		
		//'ran'
		public Keyword getRanKeyword_15() { return cRanKeyword_15; }
		
		//'succ'
		public Keyword getSuccKeyword_16() { return cSuccKeyword_16; }
		
		//'union'
		public Keyword getUnionKeyword_17() { return cUnionKeyword_17; }
		
		//'ℕ1'
		public Keyword getDoubleStruckCapitalNDigitOneKeyword_18() { return cDoubleStruckCapitalNDigitOneKeyword_18; }
		
		//'ℕ'
		public Keyword getDoubleStruckCapitalNKeyword_19() { return cDoubleStruckCapitalNKeyword_19; }
		
		//'ℙ1'
		public Keyword getDoubleStruckCapitalPDigitOneKeyword_20() { return cDoubleStruckCapitalPDigitOneKeyword_20; }
		
		//'ℙ'
		public Keyword getDoubleStruckCapitalPKeyword_21() { return cDoubleStruckCapitalPKeyword_21; }
		
		//'ℤ'
		public Keyword getDoubleStruckCapitalZKeyword_22() { return cDoubleStruckCapitalZKeyword_22; }
	}
	public class EVENTB_PREDICATE_SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.EVENTB_PREDICATE_SYMBOLS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftRightDoubleArrowKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightwardsDoubleArrowKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLogicalAndKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLogicalOrKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDownTackKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUpTackKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cForAllKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cThereExistsKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNumberSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMiddleDotKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cFullStopKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cEqualsSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cNotEqualToKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLessThanOrEqualToKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cLessThanSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cGreaterThanOrEqualToKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cGreaterThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cElementOfKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cColonKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cNotAnElementOfKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cSubsetOfKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cNotASubsetOfKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cSubsetOfOrEqualToKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cNeitherASubsetOfNorEqualToKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cPartitionKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		
		//EVENTB_PREDICATE_SYMBOLS:
		//	'(' | // Predicate calculus symbols
		//	')' |
		//	'⇔' |
		//	'⇒' |
		//	'∧' | '&' |
		//	'∨' |
		//	'¬' |
		//	'⊤' |
		//	'⊥' |
		//	'∀' | '!' |
		//	'∃' | '#' |
		//	',' |
		//	'·' | '.' |
		//	'=' | // Build predicates from expressions
		//	'≠' |
		//	'≤' |
		//	'<' |
		//	'≥' |
		//	'>' |
		//	'∈' | ':' | // Include this for Rodin keyboard
		//	'∉' |
		//	'⊂' |
		//	'⊄' |
		//	'⊆' |
		//	'⊈' |
		//	'partition' // This is missing from the Rodin D7 deliverable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' | // Predicate calculus symbols
		//')' | '⇔' | '⇒' | '∧' | '&' | '∨' | '¬' | '⊤' | '⊥' | '∀' | '!' | '∃' | '#' | ',' | '·' | '.' | '=' | // Build predicates from expressions
		//'≠' | '≤' | '<' | '≥' | '>' | '∈' | ':' | // Include this for Rodin keyboard
		//'∉' | '⊂' | '⊄' | '⊆' | '⊈' | 'partition'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//// Predicate calculus symbols
		//')'
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
		
		//'⇔'
		public Keyword getLeftRightDoubleArrowKeyword_2() { return cLeftRightDoubleArrowKeyword_2; }
		
		//'⇒'
		public Keyword getRightwardsDoubleArrowKeyword_3() { return cRightwardsDoubleArrowKeyword_3; }
		
		//'∧'
		public Keyword getLogicalAndKeyword_4() { return cLogicalAndKeyword_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//'∨'
		public Keyword getLogicalOrKeyword_6() { return cLogicalOrKeyword_6; }
		
		//'¬'
		public Keyword getNotSignKeyword_7() { return cNotSignKeyword_7; }
		
		//'⊤'
		public Keyword getDownTackKeyword_8() { return cDownTackKeyword_8; }
		
		//'⊥'
		public Keyword getUpTackKeyword_9() { return cUpTackKeyword_9; }
		
		//'∀'
		public Keyword getForAllKeyword_10() { return cForAllKeyword_10; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_11() { return cExclamationMarkKeyword_11; }
		
		//'∃'
		public Keyword getThereExistsKeyword_12() { return cThereExistsKeyword_12; }
		
		//'#'
		public Keyword getNumberSignKeyword_13() { return cNumberSignKeyword_13; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//'·'
		public Keyword getMiddleDotKeyword_15() { return cMiddleDotKeyword_15; }
		
		//'.'
		public Keyword getFullStopKeyword_16() { return cFullStopKeyword_16; }
		
		//'='
		public Keyword getEqualsSignKeyword_17() { return cEqualsSignKeyword_17; }
		
		//// Build predicates from expressions
		//'≠'
		public Keyword getNotEqualToKeyword_18() { return cNotEqualToKeyword_18; }
		
		//'≤'
		public Keyword getLessThanOrEqualToKeyword_19() { return cLessThanOrEqualToKeyword_19; }
		
		//'<'
		public Keyword getLessThanSignKeyword_20() { return cLessThanSignKeyword_20; }
		
		//'≥'
		public Keyword getGreaterThanOrEqualToKeyword_21() { return cGreaterThanOrEqualToKeyword_21; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_22() { return cGreaterThanSignKeyword_22; }
		
		//'∈'
		public Keyword getElementOfKeyword_23() { return cElementOfKeyword_23; }
		
		//':'
		public Keyword getColonKeyword_24() { return cColonKeyword_24; }
		
		//// Include this for Rodin keyboard
		//'∉'
		public Keyword getNotAnElementOfKeyword_25() { return cNotAnElementOfKeyword_25; }
		
		//'⊂'
		public Keyword getSubsetOfKeyword_26() { return cSubsetOfKeyword_26; }
		
		//'⊄'
		public Keyword getNotASubsetOfKeyword_27() { return cNotASubsetOfKeyword_27; }
		
		//'⊆'
		public Keyword getSubsetOfOrEqualToKeyword_28() { return cSubsetOfOrEqualToKeyword_28; }
		
		//'⊈'
		public Keyword getNeitherASubsetOfNorEqualToKeyword_29() { return cNeitherASubsetOfNorEqualToKeyword_29; }
		
		//'partition'
		public Keyword getPartitionKeyword_30() { return cPartitionKeyword_30; }
	}
	public class EVENTB_EXPRESSION_SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.EVENTB_EXPRESSION_SYMBOLS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftRightArrowKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateUseAreaE100Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPrivateUseAreaE101Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPrivateUseAreaE102Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRightwardsArrowWithVerticalStrokeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cRightwardsArrowKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cRightwardsArrowWithTailWithVerticalStrokeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightwardsArrowWithTailKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRightwardsTwoHeadedArrowKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRightwardsTwoHeadedArrowWithTailKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cRightwardsArrowFromBarKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cEmptySetKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cIntersectionKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUnionKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cSetMinusKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMultiplicationSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLeftSquareBracketKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cRightSquareBracketKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cPrivateUseAreaE103Keyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cRingOperatorKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cSemicolonKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cCircledTimesKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cParallelToKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cTildeOperatorKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cWhiteLeftPointingTriangleKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cZNotationDomainAntirestrictionKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cWhiteRightPointingTriangleKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cZNotationRangeAntirestrictionKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cGreekSmallLetterLamdaKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Group cGroup_32 = (Group)cAlternatives.eContents().get(32);
		private final Keyword cPercentSignKeyword_32_0 = (Keyword)cGroup_32.eContents().get(0);
		private final Keyword cNAryIntersectionKeyword_32_1 = (Keyword)cGroup_32.eContents().get(1);
		private final Keyword cNAryUnionKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cDividesKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cTwoDotLeaderKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cPlusSignKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cMinusSignKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cHyphenMinusKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cAsteriskOperatorKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cAsteriskKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cDivisionSignKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cSolidusKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cCircumflexAccentKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cBackslashKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		
		//EVENTB_EXPRESSION_SYMBOLS:
		//	'↔' | // Symbols for building set of relations
		//	'' |
		//	'' |
		//	'' |
		//	'⇸' |
		//	'→' |
		//	'⤔' |
		//	'↣' |
		//	'⤀' |
		//	'↠' |
		//	'⤖' |
		//	'{' | // Symbols for manipulating sets
		//	'}' |
		//	'↦' |
		//	'∅' |
		//	'∩' |
		//	'∪' |
		//	'∖' |
		//	'×' |
		//	'[' | // Symbols for manipulating functions and relations
		//	']' |
		//	'' |
		//	'∘' |
		//	';' |
		//	'⊗' |
		//	'∥' |
		//	'∼' |
		//	'◁' |
		//	'⩤' |
		//	'▷' |
		//	'⩥' |
		//	'λ' | '%' // Symbols for quantified expressions
		//	'⋂' |
		//	'⋃' |
		//	'∣' |
		//	'‥' | // Symbols for arithmetic expressions
		//	'+' |
		//	'−' | '-' |
		//	'∗' | '*' |
		//	'÷' | '/' |
		//	'^' |
		//	'\\' // Allowed for LaTeX combos
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'↔' | // Symbols for building set of relations
		//'' | '' | '' | '⇸' | '→' | '⤔' | '↣' | '⤀' | '↠' | '⤖' | '{' | // Symbols for manipulating sets
		//'}' | '↦' | '∅' | '∩' | '∪' | '∖' | '×' | '[' | // Symbols for manipulating functions and relations
		//']' | '' | '∘' | ';' | '⊗' | '∥' | '∼' | '◁' | '⩤' | '▷' | '⩥' | 'λ' | '%' // Symbols for quantified expressions
		//'⋂' | '⋃' | '∣' | '‥' | // Symbols for arithmetic expressions
		//'+' | '−' | '-' | '∗' | '*' | '÷' | '/' | '^' | '\\'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'↔'
		public Keyword getLeftRightArrowKeyword_0() { return cLeftRightArrowKeyword_0; }
		
		//// Symbols for building set of relations
		//''
		public Keyword getPrivateUseAreaE100Keyword_1() { return cPrivateUseAreaE100Keyword_1; }
		
		//''
		public Keyword getPrivateUseAreaE101Keyword_2() { return cPrivateUseAreaE101Keyword_2; }
		
		//''
		public Keyword getPrivateUseAreaE102Keyword_3() { return cPrivateUseAreaE102Keyword_3; }
		
		//'⇸'
		public Keyword getRightwardsArrowWithVerticalStrokeKeyword_4() { return cRightwardsArrowWithVerticalStrokeKeyword_4; }
		
		//'→'
		public Keyword getRightwardsArrowKeyword_5() { return cRightwardsArrowKeyword_5; }
		
		//'⤔'
		public Keyword getRightwardsArrowWithTailWithVerticalStrokeKeyword_6() { return cRightwardsArrowWithTailWithVerticalStrokeKeyword_6; }
		
		//'↣'
		public Keyword getRightwardsArrowWithTailKeyword_7() { return cRightwardsArrowWithTailKeyword_7; }
		
		//'⤀'
		public Keyword getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8() { return cRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8; }
		
		//'↠'
		public Keyword getRightwardsTwoHeadedArrowKeyword_9() { return cRightwardsTwoHeadedArrowKeyword_9; }
		
		//'⤖'
		public Keyword getRightwardsTwoHeadedArrowWithTailKeyword_10() { return cRightwardsTwoHeadedArrowWithTailKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//// Symbols for manipulating sets
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'↦'
		public Keyword getRightwardsArrowFromBarKeyword_13() { return cRightwardsArrowFromBarKeyword_13; }
		
		//'∅'
		public Keyword getEmptySetKeyword_14() { return cEmptySetKeyword_14; }
		
		//'∩'
		public Keyword getIntersectionKeyword_15() { return cIntersectionKeyword_15; }
		
		//'∪'
		public Keyword getUnionKeyword_16() { return cUnionKeyword_16; }
		
		//'∖'
		public Keyword getSetMinusKeyword_17() { return cSetMinusKeyword_17; }
		
		//'×'
		public Keyword getMultiplicationSignKeyword_18() { return cMultiplicationSignKeyword_18; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_19() { return cLeftSquareBracketKeyword_19; }
		
		//// Symbols for manipulating functions and relations
		//']'
		public Keyword getRightSquareBracketKeyword_20() { return cRightSquareBracketKeyword_20; }
		
		//''
		public Keyword getPrivateUseAreaE103Keyword_21() { return cPrivateUseAreaE103Keyword_21; }
		
		//'∘'
		public Keyword getRingOperatorKeyword_22() { return cRingOperatorKeyword_22; }
		
		//';'
		public Keyword getSemicolonKeyword_23() { return cSemicolonKeyword_23; }
		
		//'⊗'
		public Keyword getCircledTimesKeyword_24() { return cCircledTimesKeyword_24; }
		
		//'∥'
		public Keyword getParallelToKeyword_25() { return cParallelToKeyword_25; }
		
		//'∼'
		public Keyword getTildeOperatorKeyword_26() { return cTildeOperatorKeyword_26; }
		
		//'◁'
		public Keyword getWhiteLeftPointingTriangleKeyword_27() { return cWhiteLeftPointingTriangleKeyword_27; }
		
		//'⩤'
		public Keyword getZNotationDomainAntirestrictionKeyword_28() { return cZNotationDomainAntirestrictionKeyword_28; }
		
		//'▷'
		public Keyword getWhiteRightPointingTriangleKeyword_29() { return cWhiteRightPointingTriangleKeyword_29; }
		
		//'⩥'
		public Keyword getZNotationRangeAntirestrictionKeyword_30() { return cZNotationRangeAntirestrictionKeyword_30; }
		
		//'λ'
		public Keyword getGreekSmallLetterLamdaKeyword_31() { return cGreekSmallLetterLamdaKeyword_31; }
		
		//'%' // Symbols for quantified expressions
		//'⋂'
		public Group getGroup_32() { return cGroup_32; }
		
		//'%'
		public Keyword getPercentSignKeyword_32_0() { return cPercentSignKeyword_32_0; }
		
		//// Symbols for quantified expressions
		//'⋂'
		public Keyword getNAryIntersectionKeyword_32_1() { return cNAryIntersectionKeyword_32_1; }
		
		//'⋃'
		public Keyword getNAryUnionKeyword_33() { return cNAryUnionKeyword_33; }
		
		//'∣'
		public Keyword getDividesKeyword_34() { return cDividesKeyword_34; }
		
		//'‥'
		public Keyword getTwoDotLeaderKeyword_35() { return cTwoDotLeaderKeyword_35; }
		
		//// Symbols for arithmetic expressions
		//'+'
		public Keyword getPlusSignKeyword_36() { return cPlusSignKeyword_36; }
		
		//'−'
		public Keyword getMinusSignKeyword_37() { return cMinusSignKeyword_37; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_38() { return cHyphenMinusKeyword_38; }
		
		//'∗'
		public Keyword getAsteriskOperatorKeyword_39() { return cAsteriskOperatorKeyword_39; }
		
		//'*'
		public Keyword getAsteriskKeyword_40() { return cAsteriskKeyword_40; }
		
		//'÷'
		public Keyword getDivisionSignKeyword_41() { return cDivisionSignKeyword_41; }
		
		//'/'
		public Keyword getSolidusKeyword_42() { return cSolidusKeyword_42; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_43() { return cCircumflexAccentKeyword_43; }
		
		//'\\'
		public Keyword getBackslashKeyword_44() { return cBackslashKeyword_44; }
	}
	
	public class XDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum XDirection returns eventbcoreextension::INOUT:
		//	in | out;
		public EnumRule getRule() { return rule; }
		
		//in | out
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
	}
	public class XConvergenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XConvergence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrdinaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrdinaryOrdinaryKeyword_0_0 = (Keyword)cOrdinaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConvergentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConvergentConvergentKeyword_1_0 = (Keyword)cConvergentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAnticipatedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAnticipatedAnticipatedKeyword_2_0 = (Keyword)cAnticipatedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum XConvergence returns emachine::Convergence:
		//	ordinary | convergent | anticipated;
		public EnumRule getRule() { return rule; }
		
		//ordinary | convergent | anticipated
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ordinary
		public EnumLiteralDeclaration getOrdinaryEnumLiteralDeclaration_0() { return cOrdinaryEnumLiteralDeclaration_0; }
		
		//'ordinary'
		public Keyword getOrdinaryOrdinaryKeyword_0_0() { return cOrdinaryOrdinaryKeyword_0_0; }
		
		//convergent
		public EnumLiteralDeclaration getConvergentEnumLiteralDeclaration_1() { return cConvergentEnumLiteralDeclaration_1; }
		
		//'convergent'
		public Keyword getConvergentConvergentKeyword_1_0() { return cConvergentConvergentKeyword_1_0; }
		
		//anticipated
		public EnumLiteralDeclaration getAnticipatedEnumLiteralDeclaration_2() { return cAnticipatedEnumLiteralDeclaration_2; }
		
		//'anticipated'
		public Keyword getAnticipatedAnticipatedKeyword_2_0() { return cAnticipatedAnticipatedKeyword_2_0; }
	}
	
	private final MachineElements pMachine;
	private final MIncludesElements pMIncludes;
	private final QualifiedNameElements pQualifiedName;
	private final XVariableElements pXVariable;
	private final XInvariantElements pXInvariant;
	private final TerminalRule tXLABEL;
	private final XVariantElements pXVariant;
	private final XGroupElements pXGroup;
	private final XFormalParameterElements pXFormalParameter;
	private final XDirectionElements eXDirection;
	private final XEventElements pXEvent;
	private final EventSyncElements pEventSync;
	private final XSyncParametersElements pXSyncParameters;
	private final GroupSyncElements pGroupSync;
	private final XGroupOrEventElements pXGroupOrEvent;
	private final XConvergenceElements eXConvergence;
	private final XParameterElements pXParameter;
	private final XGuardElements pXGuard;
	private final XWitnessElements pXWitness;
	private final XActionElements pXAction;
	private final XParElements pXPar;
	private final XFormulaElements pXFormula;
	private final EVENTB_IDENTIFIER_KEYWORDElements pEVENTB_IDENTIFIER_KEYWORD;
	private final EVENTB_PREDICATE_SYMBOLSElements pEVENTB_PREDICATE_SYMBOLS;
	private final EVENTB_EXPRESSION_SYMBOLSElements pEVENTB_EXPRESSION_SYMBOLS;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMachine = new MachineElements();
		this.pMIncludes = new MIncludesElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pXVariable = new XVariableElements();
		this.pXInvariant = new XInvariantElements();
		this.tXLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XLABEL");
		this.pXVariant = new XVariantElements();
		this.pXGroup = new XGroupElements();
		this.pXFormalParameter = new XFormalParameterElements();
		this.eXDirection = new XDirectionElements();
		this.pXEvent = new XEventElements();
		this.pEventSync = new EventSyncElements();
		this.pXSyncParameters = new XSyncParametersElements();
		this.pGroupSync = new GroupSyncElements();
		this.pXGroupOrEvent = new XGroupOrEventElements();
		this.eXConvergence = new XConvergenceElements();
		this.pXParameter = new XParameterElements();
		this.pXGuard = new XGuardElements();
		this.pXWitness = new XWitnessElements();
		this.pXAction = new XActionElements();
		this.pXPar = new XParElements();
		this.pXFormula = new XFormulaElements();
		this.pEVENTB_IDENTIFIER_KEYWORD = new EVENTB_IDENTIFIER_KEYWORDElements();
		this.pEVENTB_PREDICATE_SYMBOLS = new EVENTB_PREDICATE_SYMBOLSElements();
		this.pEVENTB_EXPRESSION_SYMBOLS = new EVENTB_EXPRESSION_SYMBOLSElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xeventb.xmachine.XMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///* DD4G12
	// * For XEvent-B 0.0.8 comments are allowed everywhere
	// * ML_COMMENT and SL_COMMEN are defined as hidden
	// * Introducing event groups/cases and their synchronisation
	// */ Machine emachine::Machine:
	//	{emachine::Machine}
	//	'machine' name=ID (('refines' refines+=[emachine::Machine])? & ('sees' sees+=[econtext::Context]+)? &
	//	extensions+=MIncludes*) ('variables' variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variants'
	//	variants+=XVariant+)? ('events' events+=XEvent events+=XEvent*)?
	//	extensions+=XGroup* 'end';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//MIncludes einclusion::MachineInclusion:
	//	{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
	//	concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?;
	public MIncludesElements getMIncludesAccess() {
		return pMIncludes;
	}
	
	public ParserRule getMIncludesRule() {
		return getMIncludesAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//XVariable emachine::Variable:
	//	{emachine::Variable} name=ID;
	public XVariableElements getXVariableAccess() {
		return pXVariable;
	}
	
	public ParserRule getXVariableRule() {
		return getXVariableAccess().getRule();
	}
	
	//XInvariant emachine::Invariant:
	//	{emachine::Invariant} theorem?='theorem'? name=XLABEL predicate=XFormula;
	public XInvariantElements getXInvariantAccess() {
		return pXInvariant;
	}
	
	public ParserRule getXInvariantRule() {
		return getXInvariantAccess().getRule();
	}
	
	//terminal XLABEL:
	//	'@' !':'+ ':';
	public TerminalRule getXLABELRule() {
		return tXLABEL;
	}
	
	//XVariant emachine::Variant:
	//	{emachine::Variant} name=XLABEL expression=XFormula;
	public XVariantElements getXVariantAccess() {
		return pXVariant;
	}
	
	public ParserRule getXVariantRule() {
		return getXVariantAccess().getRule();
	}
	
	//XGroup eventbcoreextension::EventCases:
	//	{eventbcoreextension::EventCases}
	//	'group' name=ID ('(' formalParameters+=XFormalParameter (',' formalParameters+=XFormalParameter)* ')')? ('begin'
	//	events+=[emachine::Event] events+=[emachine::Event]*)? //removed comma unordered list
	//	'end';
	public XGroupElements getXGroupAccess() {
		return pXGroup;
	}
	
	public ParserRule getXGroupRule() {
		return getXGroupAccess().getRule();
	}
	
	//XFormalParameter eventbcoreextension::FormalParameter:
	//	{eventbcoreextension::FormalParameter} direction=XDirection name=ID;
	public XFormalParameterElements getXFormalParameterAccess() {
		return pXFormalParameter;
	}
	
	public ParserRule getXFormalParameterRule() {
		return getXFormalParameterAccess().getRule();
	}
	
	//enum XDirection returns eventbcoreextension::INOUT:
	//	in | out;
	public XDirectionElements getXDirectionAccess() {
		return eXDirection;
	}
	
	public EnumRule getXDirectionRule() {
		return getXDirectionAccess().getRule();
	}
	
	//XEvent emachine::Event:
	//	{emachine::Event} convergence=XConvergence?
	//	'event' name=ID ('refines' refines+=[emachine::Event]+ | extended?='extends' refines+=[emachine::Event])? ('any'
	//	parameters+=XParameter+)?
	//	extensions+=XGroupOrEvent* ('where' guards+=XGuard+)? ('then' actions+=XAction+)? ('with' witnesses+=XWitness+)?
	//	'end';
	public XEventElements getXEventAccess() {
		return pXEvent;
	}
	
	public ParserRule getXEventRule() {
		return getXEventAccess().getRule();
	}
	
	//EventSync einclusion::EventSynchronisation:
	//	{einclusion::EventSynchronisation} ('synchronises' 'event' (prefix=ID '.')? synchronisedEvent=[emachine::Event])
	//	XSyncParameters?
	//	//	( (prefix=ID'.')?(synchronisedEvent = [emachine::Event]))
	//;
	public EventSyncElements getEventSyncAccess() {
		return pEventSync;
	}
	
	public ParserRule getEventSyncRule() {
		return getEventSyncAccess().getRule();
	}
	
	//XSyncParameters:
	//	'[' ID+ ']';
	public XSyncParametersElements getXSyncParametersAccess() {
		return pXSyncParameters;
	}
	
	public ParserRule getXSyncParametersRule() {
		return getXSyncParametersAccess().getRule();
	}
	
	//GroupSync einclusion::EventSynchronisation:
	//	{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')?
	//	synchronisedCases=[eventbcoreextension::EventCases]) ('(' actualParameters+=XPar (',' actualParameters+=XPar)* ')')?;
	public GroupSyncElements getGroupSyncAccess() {
		return pGroupSync;
	}
	
	public ParserRule getGroupSyncRule() {
		return getGroupSyncAccess().getRule();
	}
	
	//XGroupOrEvent einclusion::EventSynchronisation:
	//	GroupSync | EventSync
	//	//'synchronises' GroupSync | EventSync
	//;
	public XGroupOrEventElements getXGroupOrEventAccess() {
		return pXGroupOrEvent;
	}
	
	public ParserRule getXGroupOrEventRule() {
		return getXGroupOrEventAccess().getRule();
	}
	
	//enum XConvergence returns emachine::Convergence:
	//	ordinary | convergent | anticipated;
	public XConvergenceElements getXConvergenceAccess() {
		return eXConvergence;
	}
	
	public EnumRule getXConvergenceRule() {
		return getXConvergenceAccess().getRule();
	}
	
	//XParameter emachine::Parameter:
	//	{emachine::Parameter} name=ID;
	public XParameterElements getXParameterAccess() {
		return pXParameter;
	}
	
	public ParserRule getXParameterRule() {
		return getXParameterAccess().getRule();
	}
	
	//XGuard emachine::Guard:
	//	{emachine::Guard} theorem?='theorem'? name=XLABEL predicate=XFormula;
	public XGuardElements getXGuardAccess() {
		return pXGuard;
	}
	
	public ParserRule getXGuardRule() {
		return getXGuardAccess().getRule();
	}
	
	//XWitness emachine::Witness:
	//	{emachine::Witness} name=XLABEL predicate=XFormula;
	public XWitnessElements getXWitnessAccess() {
		return pXWitness;
	}
	
	public ParserRule getXWitnessRule() {
		return getXWitnessAccess().getRule();
	}
	
	//XAction emachine::Action:
	//	{emachine::Action} name=XLABEL action=XFormula;
	public XActionElements getXActionAccess() {
		return pXAction;
	}
	
	public ParserRule getXActionRule() {
		return getXActionAccess().getRule();
	}
	
	//XPar:
	//	STRING;
	public XParElements getXParAccess() {
		return pXPar;
	}
	
	public ParserRule getXParRule() {
		return getXParAccess().getRule();
	}
	
	//XFormula:
	//	(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+;
	public XFormulaElements getXFormulaAccess() {
		return pXFormula;
	}
	
	public ParserRule getXFormulaRule() {
		return getXFormulaAccess().getRule();
	}
	
	//EVENTB_IDENTIFIER_KEYWORD:
	//	'BOOL' |
	//	'FALSE' |
	//	'TRUE' |
	//	'bool' |
	//	'card' |
	//	'dom' |
	//	'finite' |
	//	'id' |
	//	'inter' |
	//	'max' |
	//	'min' |
	//	'mod' |
	//	'pred' |
	//	'prj1' |
	//	'prj2' |
	//	'ran' |
	//	'succ' |
	//	'union' |
	//	'ℕ1' |
	//	'ℕ' |
	//	'ℙ1' |
	//	'ℙ' |
	//	'ℤ';
	public EVENTB_IDENTIFIER_KEYWORDElements getEVENTB_IDENTIFIER_KEYWORDAccess() {
		return pEVENTB_IDENTIFIER_KEYWORD;
	}
	
	public ParserRule getEVENTB_IDENTIFIER_KEYWORDRule() {
		return getEVENTB_IDENTIFIER_KEYWORDAccess().getRule();
	}
	
	//EVENTB_PREDICATE_SYMBOLS:
	//	'(' | // Predicate calculus symbols
	//	')' |
	//	'⇔' |
	//	'⇒' |
	//	'∧' | '&' |
	//	'∨' |
	//	'¬' |
	//	'⊤' |
	//	'⊥' |
	//	'∀' | '!' |
	//	'∃' | '#' |
	//	',' |
	//	'·' | '.' |
	//	'=' | // Build predicates from expressions
	//	'≠' |
	//	'≤' |
	//	'<' |
	//	'≥' |
	//	'>' |
	//	'∈' | ':' | // Include this for Rodin keyboard
	//	'∉' |
	//	'⊂' |
	//	'⊄' |
	//	'⊆' |
	//	'⊈' |
	//	'partition' // This is missing from the Rodin D7 deliverable
	//;
	public EVENTB_PREDICATE_SYMBOLSElements getEVENTB_PREDICATE_SYMBOLSAccess() {
		return pEVENTB_PREDICATE_SYMBOLS;
	}
	
	public ParserRule getEVENTB_PREDICATE_SYMBOLSRule() {
		return getEVENTB_PREDICATE_SYMBOLSAccess().getRule();
	}
	
	//EVENTB_EXPRESSION_SYMBOLS:
	//	'↔' | // Symbols for building set of relations
	//	'' |
	//	'' |
	//	'' |
	//	'⇸' |
	//	'→' |
	//	'⤔' |
	//	'↣' |
	//	'⤀' |
	//	'↠' |
	//	'⤖' |
	//	'{' | // Symbols for manipulating sets
	//	'}' |
	//	'↦' |
	//	'∅' |
	//	'∩' |
	//	'∪' |
	//	'∖' |
	//	'×' |
	//	'[' | // Symbols for manipulating functions and relations
	//	']' |
	//	'' |
	//	'∘' |
	//	';' |
	//	'⊗' |
	//	'∥' |
	//	'∼' |
	//	'◁' |
	//	'⩤' |
	//	'▷' |
	//	'⩥' |
	//	'λ' | '%' // Symbols for quantified expressions
	//	'⋂' |
	//	'⋃' |
	//	'∣' |
	//	'‥' | // Symbols for arithmetic expressions
	//	'+' |
	//	'−' | '-' |
	//	'∗' | '*' |
	//	'÷' | '/' |
	//	'^' |
	//	'\\' // Allowed for LaTeX combos
	//;
	public EVENTB_EXPRESSION_SYMBOLSElements getEVENTB_EXPRESSION_SYMBOLSAccess() {
		return pEVENTB_EXPRESSION_SYMBOLS;
	}
	
	public ParserRule getEVENTB_EXPRESSION_SYMBOLSRule() {
		return getEVENTB_EXPRESSION_SYMBOLSAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | 'i'..'ￜ') ('a'..'z' | 'A'..'Z' | '_' | 'i'..'ￜ' | '0'..'9' | "'")*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
