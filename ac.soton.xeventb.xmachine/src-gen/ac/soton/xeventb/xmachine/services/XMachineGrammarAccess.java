/*
 * generated by Xtext 2.13.0
 */
package ac.soton.xeventb.xmachine.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cRefinesKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cRefinesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cRefinesMachineCrossReference_3_0_1_0 = (CrossReference)cRefinesAssignment_3_0_1.eContents().get(0);
		private final RuleCall cRefinesMachineIDTerminalRuleCall_3_0_1_0_1 = (RuleCall)cRefinesMachineCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSeesKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSeesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cSeesContextCrossReference_3_1_1_0 = (CrossReference)cSeesAssignment_3_1_1.eContents().get(0);
		private final RuleCall cSeesContextIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cSeesContextCrossReference_3_1_1_0.eContents().get(1);
		private final Assignment cExtensionsAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cExtensionsMIncludesParserRuleCall_3_2_0 = (RuleCall)cExtensionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVariablesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesXVariableParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInvariantsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInvariantsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInvariantsXInvariantParserRuleCall_5_1_0 = (RuleCall)cInvariantsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVariantKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVariantAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVariantXVariantParserRuleCall_6_1_0 = (RuleCall)cVariantAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEventsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cEventsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cEventsXEventParserRuleCall_7_1_0 = (RuleCall)cEventsAssignment_7_1.eContents().get(0);
		private final Assignment cEventsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cEventsXEventParserRuleCall_7_2_0 = (RuleCall)cEventsAssignment_7_2.eContents().get(0);
		private final Assignment cExtensionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExtensionsXGroupParserRuleCall_8_0 = (RuleCall)cExtensionsAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///* DD4G12
		// * For XEvent-B 0.0.8 comments are allowed everywhere
		// * ML_COMMENT and SL_COMMEN are defined as hidden
		// * Introducing event groups/cases and their synchronisation
		// */ Machine emachine::Machine:
		//	{emachine::Machine}
		//	'machine' name=ID (('refines' refines+=[emachine::Machine])? & ('sees' sees+=[econtext::Context]+)? &
		//	extensions+=MIncludes*) ('variables' variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variant'
		//	variant=XVariant)? ('events' events+=XEvent events+=XEvent*)?
		//	extensions+=XGroup* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Machine} 'machine' name=ID (('refines' refines+=[emachine::Machine])? & ('sees' sees+=[econtext::Context]+)?
		//& extensions+=MIncludes*) ('variables' variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variant'
		//variant=XVariant)? ('events' events+=XEvent events+=XEvent*)? extensions+=XGroup* 'end'
		public Group getGroup() { return cGroup; }
		
		//{emachine::Machine}
		public Action getMachineAction_0() { return cMachineAction_0; }
		
		//'machine'
		public Keyword getMachineKeyword_1() { return cMachineKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('refines' refines+=[emachine::Machine])? & ('sees' sees+=[econtext::Context]+)? & extensions+=MIncludes*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('refines' refines+=[emachine::Machine])?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'refines'
		public Keyword getRefinesKeyword_3_0_0() { return cRefinesKeyword_3_0_0; }
		
		//refines+=[emachine::Machine]
		public Assignment getRefinesAssignment_3_0_1() { return cRefinesAssignment_3_0_1; }
		
		//[emachine::Machine]
		public CrossReference getRefinesMachineCrossReference_3_0_1_0() { return cRefinesMachineCrossReference_3_0_1_0; }
		
		//ID
		public RuleCall getRefinesMachineIDTerminalRuleCall_3_0_1_0_1() { return cRefinesMachineIDTerminalRuleCall_3_0_1_0_1; }
		
		//('sees' sees+=[econtext::Context]+)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'sees'
		public Keyword getSeesKeyword_3_1_0() { return cSeesKeyword_3_1_0; }
		
		//sees+=[econtext::Context]+
		public Assignment getSeesAssignment_3_1_1() { return cSeesAssignment_3_1_1; }
		
		//[econtext::Context]
		public CrossReference getSeesContextCrossReference_3_1_1_0() { return cSeesContextCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getSeesContextIDTerminalRuleCall_3_1_1_0_1() { return cSeesContextIDTerminalRuleCall_3_1_1_0_1; }
		
		//extensions+=MIncludes*
		public Assignment getExtensionsAssignment_3_2() { return cExtensionsAssignment_3_2; }
		
		//MIncludes
		public RuleCall getExtensionsMIncludesParserRuleCall_3_2_0() { return cExtensionsMIncludesParserRuleCall_3_2_0; }
		
		//('variables' variables+=XVariable+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'variables'
		public Keyword getVariablesKeyword_4_0() { return cVariablesKeyword_4_0; }
		
		//variables+=XVariable+
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }
		
		//XVariable
		public RuleCall getVariablesXVariableParserRuleCall_4_1_0() { return cVariablesXVariableParserRuleCall_4_1_0; }
		
		//('invariants' invariants+=XInvariant+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'invariants'
		public Keyword getInvariantsKeyword_5_0() { return cInvariantsKeyword_5_0; }
		
		//invariants+=XInvariant+
		public Assignment getInvariantsAssignment_5_1() { return cInvariantsAssignment_5_1; }
		
		//XInvariant
		public RuleCall getInvariantsXInvariantParserRuleCall_5_1_0() { return cInvariantsXInvariantParserRuleCall_5_1_0; }
		
		//('variant' variant=XVariant)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'variant'
		public Keyword getVariantKeyword_6_0() { return cVariantKeyword_6_0; }
		
		//variant=XVariant
		public Assignment getVariantAssignment_6_1() { return cVariantAssignment_6_1; }
		
		//XVariant
		public RuleCall getVariantXVariantParserRuleCall_6_1_0() { return cVariantXVariantParserRuleCall_6_1_0; }
		
		//('events' events+=XEvent events+=XEvent*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'events'
		public Keyword getEventsKeyword_7_0() { return cEventsKeyword_7_0; }
		
		//events+=XEvent
		public Assignment getEventsAssignment_7_1() { return cEventsAssignment_7_1; }
		
		//XEvent
		public RuleCall getEventsXEventParserRuleCall_7_1_0() { return cEventsXEventParserRuleCall_7_1_0; }
		
		//events+=XEvent*
		public Assignment getEventsAssignment_7_2() { return cEventsAssignment_7_2; }
		
		//XEvent
		public RuleCall getEventsXEventParserRuleCall_7_2_0() { return cEventsXEventParserRuleCall_7_2_0; }
		
		//extensions+=XGroup*
		public Assignment getExtensionsAssignment_8() { return cExtensionsAssignment_8; }
		
		//XGroup
		public RuleCall getExtensionsXGroupParserRuleCall_8_0() { return cExtensionsXGroupParserRuleCall_8_0; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class MIncludesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.MIncludes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineInclusionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIncludesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAbstractMachineAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAbstractMachineMachineCrossReference_1_1_0 = (CrossReference)cAbstractMachineAssignment_1_1.eContents().get(0);
		private final RuleCall cAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cAbstractMachineMachineCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConcreteMachineAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cConcreteMachineMachineCrossReference_2_1_0 = (CrossReference)cConcreteMachineAssignment_2_1.eContents().get(0);
		private final RuleCall cConcreteMachineMachineIDTerminalRuleCall_2_1_0_1 = (RuleCall)cConcreteMachineMachineCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixesIDTerminalRuleCall_3_1_0 = (RuleCall)cPrefixesAssignment_3_1.eContents().get(0);
		private final Assignment cPrefixesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPrefixesIDTerminalRuleCall_3_2_0 = (RuleCall)cPrefixesAssignment_3_2.eContents().get(0);
		
		//MIncludes einclusion::MachineInclusion:
		//	{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
		//	concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
		//concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup() { return cGroup; }
		
		//{einclusion::MachineInclusion}
		public Action getMachineInclusionAction_0() { return cMachineInclusionAction_0; }
		
		//'includes' abstractMachine=[emachine::Machine|QualifiedName]
		public Group getGroup_1() { return cGroup_1; }
		
		//'includes'
		public Keyword getIncludesKeyword_1_0() { return cIncludesKeyword_1_0; }
		
		//abstractMachine=[emachine::Machine|QualifiedName]
		public Assignment getAbstractMachineAssignment_1_1() { return cAbstractMachineAssignment_1_1; }
		
		//[emachine::Machine|QualifiedName]
		public CrossReference getAbstractMachineMachineCrossReference_1_1_0() { return cAbstractMachineMachineCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1() { return cAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1; }
		
		//('to' concreteMachine=[emachine::Machine])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'to'
		public Keyword getToKeyword_2_0() { return cToKeyword_2_0; }
		
		//concreteMachine=[emachine::Machine]
		public Assignment getConcreteMachineAssignment_2_1() { return cConcreteMachineAssignment_2_1; }
		
		//[emachine::Machine]
		public CrossReference getConcreteMachineMachineCrossReference_2_1_0() { return cConcreteMachineMachineCrossReference_2_1_0; }
		
		//ID
		public RuleCall getConcreteMachineMachineIDTerminalRuleCall_2_1_0_1() { return cConcreteMachineMachineIDTerminalRuleCall_2_1_0_1; }
		
		//('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//prefixes+=ID
		public Assignment getPrefixesAssignment_3_1() { return cPrefixesAssignment_3_1; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_3_1_0() { return cPrefixesIDTerminalRuleCall_3_1_0; }
		
		//prefixes+=ID*
		public Assignment getPrefixesAssignment_3_2() { return cPrefixesAssignment_3_2; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_3_2_0() { return cPrefixesIDTerminalRuleCall_3_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class XVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XVariable emachine::Variable:
		//	{emachine::Variable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXPredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//XInvariant emachine::Invariant:
		//	{emachine::Invariant} name=XLABEL predicate=XPredicate theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Invariant} name=XLABEL predicate=XPredicate theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=XPredicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XPredicate
		public RuleCall getPredicateXPredicateParserRuleCall_2_0() { return cPredicateXPredicateParserRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}
	public class XVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionXPredicateParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//XVariant emachine::Variant:
		//	{emachine::Variant} expression=XPredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variant} expression=XPredicate
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//expression=XPredicate
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//XPredicate
		public RuleCall getExpressionXPredicateParserRuleCall_1_0() { return cExpressionXPredicateParserRuleCall_1_0; }
	}
	public class XGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventCasesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFormalParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFormalParametersXFormalParameterParserRuleCall_3_1_0 = (RuleCall)cFormalParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFormalParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cFormalParametersXFormalParameterParserRuleCall_3_2_1_0 = (RuleCall)cFormalParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBeginKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEventsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEventsEventCrossReference_4_1_0 = (CrossReference)cEventsAssignment_4_1.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_4_1_0_1 = (RuleCall)cEventsEventCrossReference_4_1_0.eContents().get(1);
		private final Assignment cEventsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cEventsEventCrossReference_4_2_0 = (CrossReference)cEventsAssignment_4_2.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_4_2_0_1 = (RuleCall)cEventsEventCrossReference_4_2_0.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XGroup eventbcoreextension::EventCases:
		//	{eventbcoreextension::EventCases}
		//	'group' name=ID ('(' formalParameters+=XFormalParameter (',' formalParameters+=XFormalParameter)* ')')? ('begin'
		//	events+=[emachine::Event] events+=[emachine::Event]*)? //removed comma unordered list
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{eventbcoreextension::EventCases} 'group' name=ID ('(' formalParameters+=XFormalParameter (','
		//formalParameters+=XFormalParameter)* ')')? ('begin' events+=[emachine::Event] events+=[emachine::Event]*)? //removed comma unordered list
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{eventbcoreextension::EventCases}
		public Action getEventCasesAction_0() { return cEventCasesAction_0; }
		
		//'group'
		public Keyword getGroupKeyword_1() { return cGroupKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' formalParameters+=XFormalParameter (',' formalParameters+=XFormalParameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//formalParameters+=XFormalParameter
		public Assignment getFormalParametersAssignment_3_1() { return cFormalParametersAssignment_3_1; }
		
		//XFormalParameter
		public RuleCall getFormalParametersXFormalParameterParserRuleCall_3_1_0() { return cFormalParametersXFormalParameterParserRuleCall_3_1_0; }
		
		//(',' formalParameters+=XFormalParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//formalParameters+=XFormalParameter
		public Assignment getFormalParametersAssignment_3_2_1() { return cFormalParametersAssignment_3_2_1; }
		
		//XFormalParameter
		public RuleCall getFormalParametersXFormalParameterParserRuleCall_3_2_1_0() { return cFormalParametersXFormalParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('begin' events+=[emachine::Event] events+=[emachine::Event]*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'begin'
		public Keyword getBeginKeyword_4_0() { return cBeginKeyword_4_0; }
		
		//events+=[emachine::Event]
		public Assignment getEventsAssignment_4_1() { return cEventsAssignment_4_1; }
		
		//[emachine::Event]
		public CrossReference getEventsEventCrossReference_4_1_0() { return cEventsEventCrossReference_4_1_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_4_1_0_1() { return cEventsEventIDTerminalRuleCall_4_1_0_1; }
		
		//events+=[emachine::Event]*
		public Assignment getEventsAssignment_4_2() { return cEventsAssignment_4_2; }
		
		//[emachine::Event]
		public CrossReference getEventsEventCrossReference_4_2_0() { return cEventsEventCrossReference_4_2_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_4_2_0_1() { return cEventsEventIDTerminalRuleCall_4_2_0_1; }
		
		////removed comma unordered list
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class XFormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XFormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormalParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionXDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XFormalParameter eventbcoreextension::FormalParameter:
		//	{eventbcoreextension::FormalParameter} direction=XDirection name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{eventbcoreextension::FormalParameter} direction=XDirection name=ID
		public Group getGroup() { return cGroup; }
		
		//{eventbcoreextension::FormalParameter}
		public Action getFormalParameterAction_0() { return cFormalParameterAction_0; }
		
		//direction=XDirection
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//XDirection
		public RuleCall getDirectionXDirectionEnumRuleCall_1_0() { return cDirectionXDirectionEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class XEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cExtendedAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cExtendedExtendedKeyword_3_0_0 = (Keyword)cExtendedAssignment_3_0.eContents().get(0);
		private final Assignment cConvergenceAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cConvergenceXConvergenceEnumRuleCall_3_1_0 = (RuleCall)cConvergenceAssignment_3_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtensionsXGroupOrEventParserRuleCall_4_0 = (RuleCall)cExtensionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRefinesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRefinesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRefinesEventCrossReference_5_1_0 = (CrossReference)cRefinesAssignment_5_1.eContents().get(0);
		private final RuleCall cRefinesEventIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRefinesEventCrossReference_5_1_0.eContents().get(1);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Group cGroup_6_0_0 = (Group)cGroup_6_0.eContents().get(0);
		private final Keyword cWithKeyword_6_0_0_0 = (Keyword)cGroup_6_0_0.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_0_0_1 = (Assignment)cGroup_6_0_0.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_0_0_1_0 = (RuleCall)cWitnessesAssignment_6_0_0_1.eContents().get(0);
		private final Keyword cBeginKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cActionsAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final RuleCall cActionsXActionParserRuleCall_6_0_2_0 = (RuleCall)cActionsAssignment_6_0_2.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cWhenKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cGuardsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cGuardsXGuardParserRuleCall_6_1_1_0 = (RuleCall)cGuardsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_1_2 = (Group)cGroup_6_1.eContents().get(2);
		private final Keyword cWithKeyword_6_1_2_0 = (Keyword)cGroup_6_1_2.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_1_2_1 = (Assignment)cGroup_6_1_2.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_1_2_1_0 = (RuleCall)cWitnessesAssignment_6_1_2_1.eContents().get(0);
		private final Group cGroup_6_1_3 = (Group)cGroup_6_1.eContents().get(3);
		private final Keyword cThenKeyword_6_1_3_0 = (Keyword)cGroup_6_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_6_1_3_1 = (Assignment)cGroup_6_1_3.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_6_1_3_1_0 = (RuleCall)cActionsAssignment_6_1_3_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cAlternatives_6.eContents().get(2);
		private final Keyword cAnyKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cParametersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cParametersXParameterParserRuleCall_6_2_1_0 = (RuleCall)cParametersAssignment_6_2_1.eContents().get(0);
		private final Keyword cWhereKeyword_6_2_2 = (Keyword)cGroup_6_2.eContents().get(2);
		private final Assignment cGuardsAssignment_6_2_3 = (Assignment)cGroup_6_2.eContents().get(3);
		private final RuleCall cGuardsXGuardParserRuleCall_6_2_3_0 = (RuleCall)cGuardsAssignment_6_2_3.eContents().get(0);
		private final Group cGroup_6_2_4 = (Group)cGroup_6_2.eContents().get(4);
		private final Keyword cWithKeyword_6_2_4_0 = (Keyword)cGroup_6_2_4.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_2_4_1 = (Assignment)cGroup_6_2_4.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_2_4_1_0 = (RuleCall)cWitnessesAssignment_6_2_4_1.eContents().get(0);
		private final Group cGroup_6_2_5 = (Group)cGroup_6_2.eContents().get(5);
		private final Keyword cThenKeyword_6_2_5_0 = (Keyword)cGroup_6_2_5.eContents().get(0);
		private final Assignment cActionsAssignment_6_2_5_1 = (Assignment)cGroup_6_2_5.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_6_2_5_1_0 = (RuleCall)cActionsAssignment_6_2_5_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XEvent emachine::Event:
		//	{emachine::Event}
		//	'event' name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=XGroupOrEvent* ('refines'
		//	refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)?
		//	'begin'
		//	actions+=XAction+
		//	|
		//	'when'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?
		//	|
		//	'any'
		//	parameters+=XParameter+
		//	'where'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Event} 'event' name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=XGroupOrEvent*
		//('refines' refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ | 'when'
		//guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)? | 'any' parameters+=XParameter+ 'where'
		//guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{emachine::Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//extended?='extended'? & convergence=XConvergence?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//extended?='extended'?
		public Assignment getExtendedAssignment_3_0() { return cExtendedAssignment_3_0; }
		
		//'extended'
		public Keyword getExtendedExtendedKeyword_3_0_0() { return cExtendedExtendedKeyword_3_0_0; }
		
		//convergence=XConvergence?
		public Assignment getConvergenceAssignment_3_1() { return cConvergenceAssignment_3_1; }
		
		//XConvergence
		public RuleCall getConvergenceXConvergenceEnumRuleCall_3_1_0() { return cConvergenceXConvergenceEnumRuleCall_3_1_0; }
		
		////	( extensions+= EventSync*)
		//extensions+=XGroupOrEvent*
		public Assignment getExtensionsAssignment_4() { return cExtensionsAssignment_4; }
		
		//XGroupOrEvent
		public RuleCall getExtensionsXGroupOrEventParserRuleCall_4_0() { return cExtensionsXGroupOrEventParserRuleCall_4_0; }
		
		//('refines' refines+=[emachine::Event]+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'refines'
		public Keyword getRefinesKeyword_5_0() { return cRefinesKeyword_5_0; }
		
		//refines+=[emachine::Event]+
		public Assignment getRefinesAssignment_5_1() { return cRefinesAssignment_5_1; }
		
		//[emachine::Event]
		public CrossReference getRefinesEventCrossReference_5_1_0() { return cRefinesEventCrossReference_5_1_0; }
		
		//ID
		public RuleCall getRefinesEventIDTerminalRuleCall_5_1_0_1() { return cRefinesEventIDTerminalRuleCall_5_1_0_1; }
		
		//(('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ | 'when' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)? | 'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)?)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//('with' witnesses+=XWitness+)? 'begin' actions+=XAction+
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_0_0() { return cGroup_6_0_0; }
		
		//'with'
		public Keyword getWithKeyword_6_0_0_0() { return cWithKeyword_6_0_0_0; }
		
		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_0_0_1() { return cWitnessesAssignment_6_0_0_1; }
		
		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_0_0_1_0() { return cWitnessesXWitnessParserRuleCall_6_0_0_1_0; }
		
		//'begin'
		public Keyword getBeginKeyword_6_0_1() { return cBeginKeyword_6_0_1; }
		
		//actions+=XAction+
		public Assignment getActionsAssignment_6_0_2() { return cActionsAssignment_6_0_2; }
		
		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_0_2_0() { return cActionsXActionParserRuleCall_6_0_2_0; }
		
		//'when' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'when'
		public Keyword getWhenKeyword_6_1_0() { return cWhenKeyword_6_1_0; }
		
		//guards+=XGuard+
		public Assignment getGuardsAssignment_6_1_1() { return cGuardsAssignment_6_1_1; }
		
		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_6_1_1_0() { return cGuardsXGuardParserRuleCall_6_1_1_0; }
		
		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_1_2() { return cGroup_6_1_2; }
		
		//'with'
		public Keyword getWithKeyword_6_1_2_0() { return cWithKeyword_6_1_2_0; }
		
		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_1_2_1() { return cWitnessesAssignment_6_1_2_1; }
		
		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_1_2_1_0() { return cWitnessesXWitnessParserRuleCall_6_1_2_1_0; }
		
		//('then' actions+=XAction+)?
		public Group getGroup_6_1_3() { return cGroup_6_1_3; }
		
		//'then'
		public Keyword getThenKeyword_6_1_3_0() { return cThenKeyword_6_1_3_0; }
		
		//actions+=XAction+
		public Assignment getActionsAssignment_6_1_3_1() { return cActionsAssignment_6_1_3_1; }
		
		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_1_3_1_0() { return cActionsXActionParserRuleCall_6_1_3_1_0; }
		
		//'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//'any'
		public Keyword getAnyKeyword_6_2_0() { return cAnyKeyword_6_2_0; }
		
		//parameters+=XParameter+
		public Assignment getParametersAssignment_6_2_1() { return cParametersAssignment_6_2_1; }
		
		//XParameter
		public RuleCall getParametersXParameterParserRuleCall_6_2_1_0() { return cParametersXParameterParserRuleCall_6_2_1_0; }
		
		//'where'
		public Keyword getWhereKeyword_6_2_2() { return cWhereKeyword_6_2_2; }
		
		//guards+=XGuard+
		public Assignment getGuardsAssignment_6_2_3() { return cGuardsAssignment_6_2_3; }
		
		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_6_2_3_0() { return cGuardsXGuardParserRuleCall_6_2_3_0; }
		
		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_2_4() { return cGroup_6_2_4; }
		
		//'with'
		public Keyword getWithKeyword_6_2_4_0() { return cWithKeyword_6_2_4_0; }
		
		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_2_4_1() { return cWitnessesAssignment_6_2_4_1; }
		
		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_2_4_1_0() { return cWitnessesXWitnessParserRuleCall_6_2_4_1_0; }
		
		//('then' actions+=XAction+)?
		public Group getGroup_6_2_5() { return cGroup_6_2_5; }
		
		//'then'
		public Keyword getThenKeyword_6_2_5_0() { return cThenKeyword_6_2_5_0; }
		
		//actions+=XAction+
		public Assignment getActionsAssignment_6_2_5_1() { return cActionsAssignment_6_2_5_1; }
		
		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_2_5_1_0() { return cActionsXActionParserRuleCall_6_2_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class EventSyncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.EventSync");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventSynchronisationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSynchronisesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cPrefixAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPrefixIDTerminalRuleCall_1_1_0_0 = (RuleCall)cPrefixAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSynchronisedEventAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cSynchronisedEventEventCrossReference_1_2_0 = (CrossReference)cSynchronisedEventAssignment_1_2.eContents().get(0);
		private final RuleCall cSynchronisedEventEventIDTerminalRuleCall_1_2_0_1 = (RuleCall)cSynchronisedEventEventCrossReference_1_2_0.eContents().get(1);
		private final RuleCall cXSyncParametersParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EventSync einclusion::EventSynchronisation:
		//	{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')? synchronisedEvent=[emachine::Event])
		//	XSyncParameters?
		//	//	( (prefix=ID'.')?(synchronisedEvent = [emachine::Event]))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')? synchronisedEvent=[emachine::Event])
		//XSyncParameters?
		public Group getGroup() { return cGroup; }
		
		//{einclusion::EventSynchronisation}
		public Action getEventSynchronisationAction_0() { return cEventSynchronisationAction_0; }
		
		//'synchronises' (prefix=ID '.')? synchronisedEvent=[emachine::Event]
		public Group getGroup_1() { return cGroup_1; }
		
		//'synchronises'
		public Keyword getSynchronisesKeyword_1_0() { return cSynchronisesKeyword_1_0; }
		
		//(prefix=ID '.')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//prefix=ID
		public Assignment getPrefixAssignment_1_1_0() { return cPrefixAssignment_1_1_0; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_1_1_0_0() { return cPrefixIDTerminalRuleCall_1_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//synchronisedEvent=[emachine::Event]
		public Assignment getSynchronisedEventAssignment_1_2() { return cSynchronisedEventAssignment_1_2; }
		
		//[emachine::Event]
		public CrossReference getSynchronisedEventEventCrossReference_1_2_0() { return cSynchronisedEventEventCrossReference_1_2_0; }
		
		//ID
		public RuleCall getSynchronisedEventEventIDTerminalRuleCall_1_2_0_1() { return cSynchronisedEventEventIDTerminalRuleCall_1_2_0_1; }
		
		//XSyncParameters?
		public RuleCall getXSyncParametersParserRuleCall_2() { return cXSyncParametersParserRuleCall_2; }
	}
	public class XSyncParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XSyncParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XSyncParameters:
		//	'[' ID+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ID+ ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//ID+
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class GroupSyncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.GroupSync");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventSynchronisationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSynchronisesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cGroupKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cPrefixAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cPrefixIDTerminalRuleCall_1_2_0_0 = (RuleCall)cPrefixAssignment_1_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cSynchronisedCasesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cSynchronisedCasesEventCasesCrossReference_1_3_0 = (CrossReference)cSynchronisedCasesAssignment_1_3.eContents().get(0);
		private final RuleCall cSynchronisedCasesEventCasesIDTerminalRuleCall_1_3_0_1 = (RuleCall)cSynchronisedCasesEventCasesCrossReference_1_3_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActualParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActualParametersIDTerminalRuleCall_2_1_0 = (RuleCall)cActualParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cActualParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cActualParametersIDTerminalRuleCall_2_2_1_0 = (RuleCall)cActualParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//GroupSync einclusion::EventSynchronisation:
		//	{einclusion::EventSynchronisation} ('synchronises' 'group' (prefix=ID '.')?
		//	synchronisedCases=[eventbcoreextension::EventCases]) ('(' actualParameters+=ID (',' actualParameters+=ID)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{einclusion::EventSynchronisation} ('synchronises' 'group' (prefix=ID '.')?
		//synchronisedCases=[eventbcoreextension::EventCases]) ('(' actualParameters+=ID (',' actualParameters+=ID)* ')')?
		public Group getGroup() { return cGroup; }
		
		//{einclusion::EventSynchronisation}
		public Action getEventSynchronisationAction_0() { return cEventSynchronisationAction_0; }
		
		////  ( (prefix=ID'.')?(synchronisedCases = [eventbcoreextension::EventCases]))('(' actualParameters += ID (',' actualParameters += ID)* ')')? 
		//'synchronises' 'group' (prefix=ID '.')? synchronisedCases=[eventbcoreextension::EventCases]
		public Group getGroup_1() { return cGroup_1; }
		
		//'synchronises'
		public Keyword getSynchronisesKeyword_1_0() { return cSynchronisesKeyword_1_0; }
		
		//'group'
		public Keyword getGroupKeyword_1_1() { return cGroupKeyword_1_1; }
		
		//(prefix=ID '.')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//prefix=ID
		public Assignment getPrefixAssignment_1_2_0() { return cPrefixAssignment_1_2_0; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_1_2_0_0() { return cPrefixIDTerminalRuleCall_1_2_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_1() { return cFullStopKeyword_1_2_1; }
		
		//synchronisedCases=[eventbcoreextension::EventCases]
		public Assignment getSynchronisedCasesAssignment_1_3() { return cSynchronisedCasesAssignment_1_3; }
		
		//[eventbcoreextension::EventCases]
		public CrossReference getSynchronisedCasesEventCasesCrossReference_1_3_0() { return cSynchronisedCasesEventCasesCrossReference_1_3_0; }
		
		//ID
		public RuleCall getSynchronisedCasesEventCasesIDTerminalRuleCall_1_3_0_1() { return cSynchronisedCasesEventCasesIDTerminalRuleCall_1_3_0_1; }
		
		//('(' actualParameters+=ID (',' actualParameters+=ID)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//actualParameters+=ID
		public Assignment getActualParametersAssignment_2_1() { return cActualParametersAssignment_2_1; }
		
		//ID
		public RuleCall getActualParametersIDTerminalRuleCall_2_1_0() { return cActualParametersIDTerminalRuleCall_2_1_0; }
		
		//(',' actualParameters+=ID)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//actualParameters+=ID
		public Assignment getActualParametersAssignment_2_2_1() { return cActualParametersAssignment_2_2_1; }
		
		//ID
		public RuleCall getActualParametersIDTerminalRuleCall_2_2_1_0() { return cActualParametersIDTerminalRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class XGroupOrEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGroupOrEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGroupSyncParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventSyncParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XGroupOrEvent einclusion::EventSynchronisation:
		//	GroupSync | EventSync
		//	//'synchronises' GroupSync | EventSync
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GroupSync | EventSync
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GroupSync
		public RuleCall getGroupSyncParserRuleCall_0() { return cGroupSyncParserRuleCall_0; }
		
		//EventSync
		public RuleCall getEventSyncParserRuleCall_1() { return cEventSyncParserRuleCall_1; }
	}
	public class XParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XParameter emachine::Parameter:
		//	{emachine::Parameter} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Parameter} name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXPredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//XGuard emachine::Guard:
		//	{emachine::Guard} name=XLABEL predicate=XPredicate theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Guard} name=XLABEL predicate=XPredicate theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=XPredicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XPredicate
		public RuleCall getPredicateXPredicateParserRuleCall_2_0() { return cPredicateXPredicateParserRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}
	public class XWitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XWitness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXPredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//XWitness emachine::Witness:
		//	{emachine::Witness} name=XLABEL predicate=XPredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Witness} name=XLABEL predicate=XPredicate
		public Group getGroup() { return cGroup; }
		
		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=XPredicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XPredicate
		public RuleCall getPredicateXPredicateParserRuleCall_2_0() { return cPredicateXPredicateParserRuleCall_2_0; }
	}
	public class XActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionXPredicateParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//XAction emachine::Action:
		//	{emachine::Action} name=XLABEL action=XPredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Action} name=XLABEL action=XPredicate
		public Group getGroup() { return cGroup; }
		
		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//action=XPredicate
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//XPredicate
		public RuleCall getActionXPredicateParserRuleCall_2_0() { return cActionXPredicateParserRuleCall_2_0; }
	}
	public class XPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XPredicate");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XPredicate:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	public class XDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum XDirection returns eventbcoreextension::INOUT:
		//	in | out;
		public EnumRule getRule() { return rule; }
		
		//in | out
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
	}
	public class XConvergenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XConvergence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrdinaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrdinaryOrdinaryKeyword_0_0 = (Keyword)cOrdinaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConvergentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConvergentConvergentKeyword_1_0 = (Keyword)cConvergentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAnticipatedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAnticipatedAnticipatedKeyword_2_0 = (Keyword)cAnticipatedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum XConvergence returns emachine::Convergence:
		//	ordinary | convergent | anticipated;
		public EnumRule getRule() { return rule; }
		
		//ordinary | convergent | anticipated
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ordinary
		public EnumLiteralDeclaration getOrdinaryEnumLiteralDeclaration_0() { return cOrdinaryEnumLiteralDeclaration_0; }
		
		//'ordinary'
		public Keyword getOrdinaryOrdinaryKeyword_0_0() { return cOrdinaryOrdinaryKeyword_0_0; }
		
		//convergent
		public EnumLiteralDeclaration getConvergentEnumLiteralDeclaration_1() { return cConvergentEnumLiteralDeclaration_1; }
		
		//'convergent'
		public Keyword getConvergentConvergentKeyword_1_0() { return cConvergentConvergentKeyword_1_0; }
		
		//anticipated
		public EnumLiteralDeclaration getAnticipatedEnumLiteralDeclaration_2() { return cAnticipatedEnumLiteralDeclaration_2; }
		
		//'anticipated'
		public Keyword getAnticipatedAnticipatedKeyword_2_0() { return cAnticipatedAnticipatedKeyword_2_0; }
	}
	
	private final MachineElements pMachine;
	private final MIncludesElements pMIncludes;
	private final QualifiedNameElements pQualifiedName;
	private final XVariableElements pXVariable;
	private final XInvariantElements pXInvariant;
	private final TerminalRule tXLABEL;
	private final XVariantElements pXVariant;
	private final XGroupElements pXGroup;
	private final XFormalParameterElements pXFormalParameter;
	private final XDirectionElements eXDirection;
	private final XEventElements pXEvent;
	private final EventSyncElements pEventSync;
	private final XSyncParametersElements pXSyncParameters;
	private final GroupSyncElements pGroupSync;
	private final XGroupOrEventElements pXGroupOrEvent;
	private final XConvergenceElements eXConvergence;
	private final XParameterElements pXParameter;
	private final XGuardElements pXGuard;
	private final XWitnessElements pXWitness;
	private final XActionElements pXAction;
	private final XPredicateElements pXPredicate;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMachine = new MachineElements();
		this.pMIncludes = new MIncludesElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pXVariable = new XVariableElements();
		this.pXInvariant = new XInvariantElements();
		this.tXLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XLABEL");
		this.pXVariant = new XVariantElements();
		this.pXGroup = new XGroupElements();
		this.pXFormalParameter = new XFormalParameterElements();
		this.eXDirection = new XDirectionElements();
		this.pXEvent = new XEventElements();
		this.pEventSync = new EventSyncElements();
		this.pXSyncParameters = new XSyncParametersElements();
		this.pGroupSync = new GroupSyncElements();
		this.pXGroupOrEvent = new XGroupOrEventElements();
		this.eXConvergence = new XConvergenceElements();
		this.pXParameter = new XParameterElements();
		this.pXGuard = new XGuardElements();
		this.pXWitness = new XWitnessElements();
		this.pXAction = new XActionElements();
		this.pXPredicate = new XPredicateElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xeventb.xmachine.XMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///* DD4G12
	// * For XEvent-B 0.0.8 comments are allowed everywhere
	// * ML_COMMENT and SL_COMMEN are defined as hidden
	// * Introducing event groups/cases and their synchronisation
	// */ Machine emachine::Machine:
	//	{emachine::Machine}
	//	'machine' name=ID (('refines' refines+=[emachine::Machine])? & ('sees' sees+=[econtext::Context]+)? &
	//	extensions+=MIncludes*) ('variables' variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variant'
	//	variant=XVariant)? ('events' events+=XEvent events+=XEvent*)?
	//	extensions+=XGroup* 'end';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//MIncludes einclusion::MachineInclusion:
	//	{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
	//	concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?;
	public MIncludesElements getMIncludesAccess() {
		return pMIncludes;
	}
	
	public ParserRule getMIncludesRule() {
		return getMIncludesAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//XVariable emachine::Variable:
	//	{emachine::Variable} name=ID;
	public XVariableElements getXVariableAccess() {
		return pXVariable;
	}
	
	public ParserRule getXVariableRule() {
		return getXVariableAccess().getRule();
	}
	
	//XInvariant emachine::Invariant:
	//	{emachine::Invariant} name=XLABEL predicate=XPredicate theorem?='theorem'?;
	public XInvariantElements getXInvariantAccess() {
		return pXInvariant;
	}
	
	public ParserRule getXInvariantRule() {
		return getXInvariantAccess().getRule();
	}
	
	//terminal XLABEL:
	//	'@' !':'+ ':';
	public TerminalRule getXLABELRule() {
		return tXLABEL;
	}
	
	//XVariant emachine::Variant:
	//	{emachine::Variant} expression=XPredicate;
	public XVariantElements getXVariantAccess() {
		return pXVariant;
	}
	
	public ParserRule getXVariantRule() {
		return getXVariantAccess().getRule();
	}
	
	//XGroup eventbcoreextension::EventCases:
	//	{eventbcoreextension::EventCases}
	//	'group' name=ID ('(' formalParameters+=XFormalParameter (',' formalParameters+=XFormalParameter)* ')')? ('begin'
	//	events+=[emachine::Event] events+=[emachine::Event]*)? //removed comma unordered list
	//	'end';
	public XGroupElements getXGroupAccess() {
		return pXGroup;
	}
	
	public ParserRule getXGroupRule() {
		return getXGroupAccess().getRule();
	}
	
	//XFormalParameter eventbcoreextension::FormalParameter:
	//	{eventbcoreextension::FormalParameter} direction=XDirection name=ID;
	public XFormalParameterElements getXFormalParameterAccess() {
		return pXFormalParameter;
	}
	
	public ParserRule getXFormalParameterRule() {
		return getXFormalParameterAccess().getRule();
	}
	
	//enum XDirection returns eventbcoreextension::INOUT:
	//	in | out;
	public XDirectionElements getXDirectionAccess() {
		return eXDirection;
	}
	
	public EnumRule getXDirectionRule() {
		return getXDirectionAccess().getRule();
	}
	
	//XEvent emachine::Event:
	//	{emachine::Event}
	//	'event' name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=XGroupOrEvent* ('refines'
	//	refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)?
	//	'begin'
	//	actions+=XAction+
	//	|
	//	'when'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?
	//	|
	//	'any'
	//	parameters+=XParameter+
	//	'where'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?)?
	//	'end';
	public XEventElements getXEventAccess() {
		return pXEvent;
	}
	
	public ParserRule getXEventRule() {
		return getXEventAccess().getRule();
	}
	
	//EventSync einclusion::EventSynchronisation:
	//	{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')? synchronisedEvent=[emachine::Event])
	//	XSyncParameters?
	//	//	( (prefix=ID'.')?(synchronisedEvent = [emachine::Event]))
	//;
	public EventSyncElements getEventSyncAccess() {
		return pEventSync;
	}
	
	public ParserRule getEventSyncRule() {
		return getEventSyncAccess().getRule();
	}
	
	//XSyncParameters:
	//	'[' ID+ ']';
	public XSyncParametersElements getXSyncParametersAccess() {
		return pXSyncParameters;
	}
	
	public ParserRule getXSyncParametersRule() {
		return getXSyncParametersAccess().getRule();
	}
	
	//GroupSync einclusion::EventSynchronisation:
	//	{einclusion::EventSynchronisation} ('synchronises' 'group' (prefix=ID '.')?
	//	synchronisedCases=[eventbcoreextension::EventCases]) ('(' actualParameters+=ID (',' actualParameters+=ID)* ')')?;
	public GroupSyncElements getGroupSyncAccess() {
		return pGroupSync;
	}
	
	public ParserRule getGroupSyncRule() {
		return getGroupSyncAccess().getRule();
	}
	
	//XGroupOrEvent einclusion::EventSynchronisation:
	//	GroupSync | EventSync
	//	//'synchronises' GroupSync | EventSync
	//;
	public XGroupOrEventElements getXGroupOrEventAccess() {
		return pXGroupOrEvent;
	}
	
	public ParserRule getXGroupOrEventRule() {
		return getXGroupOrEventAccess().getRule();
	}
	
	//enum XConvergence returns emachine::Convergence:
	//	ordinary | convergent | anticipated;
	public XConvergenceElements getXConvergenceAccess() {
		return eXConvergence;
	}
	
	public EnumRule getXConvergenceRule() {
		return getXConvergenceAccess().getRule();
	}
	
	//XParameter emachine::Parameter:
	//	{emachine::Parameter} name=ID;
	public XParameterElements getXParameterAccess() {
		return pXParameter;
	}
	
	public ParserRule getXParameterRule() {
		return getXParameterAccess().getRule();
	}
	
	//XGuard emachine::Guard:
	//	{emachine::Guard} name=XLABEL predicate=XPredicate theorem?='theorem'?;
	public XGuardElements getXGuardAccess() {
		return pXGuard;
	}
	
	public ParserRule getXGuardRule() {
		return getXGuardAccess().getRule();
	}
	
	//XWitness emachine::Witness:
	//	{emachine::Witness} name=XLABEL predicate=XPredicate;
	public XWitnessElements getXWitnessAccess() {
		return pXWitness;
	}
	
	public ParserRule getXWitnessRule() {
		return getXWitnessAccess().getRule();
	}
	
	//XAction emachine::Action:
	//	{emachine::Action} name=XLABEL action=XPredicate;
	public XActionElements getXActionAccess() {
		return pXAction;
	}
	
	public ParserRule getXActionRule() {
		return getXActionAccess().getRule();
	}
	
	//XPredicate:
	//	STRING;
	public XPredicateElements getXPredicateAccess() {
		return pXPredicate;
	}
	
	public ParserRule getXPredicateRule() {
		return getXPredicateAccess().getRule();
	}
	
	//@ Override terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | 'i'..'ￜ') ('a'..'z' | 'A'..'Z' | '_' | 'i'..'ￜ' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
